# Generated from PBXProj.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u008f")
        buf.write("\u068f\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\3\2\3\2\3\3\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\5\7\u0177")
        buf.write("\n\7\3\7\5\7\u017a\n\7\3\7\5\7\u017d\n\7\3\7\5\7\u0180")
        buf.write("\n\7\3\7\3\7\5\7\u0184\n\7\3\7\3\7\5\7\u0188\n\7\3\7\5")
        buf.write("\7\u018b\n\7\3\7\5\7\u018e\n\7\3\7\3\7\5\7\u0192\n\7\3")
        buf.write("\7\5\7\u0195\n\7\3\7\5\7\u0198\n\7\3\7\5\7\u019b\n\7\3")
        buf.write("\7\5\7\u019e\n\7\3\7\5\7\u01a1\n\7\3\7\3\7\3\7\5\7\u01a6")
        buf.write("\n\7\3\7\5\7\u01a9\n\7\3\7\5\7\u01ac\n\7\3\7\3\7\3\7\3")
        buf.write("\b\3\b\3\b\3\b\3\b\3\t\6\t\u01b7\n\t\r\t\16\t\u01b8\3")
        buf.write("\n\6\n\u01bc\n\n\r\n\16\n\u01bd\3\13\6\13\u01c1\n\13\r")
        buf.write("\13\16\13\u01c2\3\f\6\f\u01c6\n\f\r\f\16\f\u01c7\3\r\6")
        buf.write("\r\u01cb\n\r\r\r\16\r\u01cc\3\16\6\16\u01d0\n\16\r\16")
        buf.write("\16\16\u01d1\3\17\6\17\u01d5\n\17\r\17\16\17\u01d6\3\20")
        buf.write("\6\20\u01da\n\20\r\20\16\20\u01db\3\21\6\21\u01df\n\21")
        buf.write("\r\21\16\21\u01e0\3\22\6\22\u01e4\n\22\r\22\16\22\u01e5")
        buf.write("\3\23\6\23\u01e9\n\23\r\23\16\23\u01ea\3\24\6\24\u01ee")
        buf.write("\n\24\r\24\16\24\u01ef\3\25\6\25\u01f3\n\25\r\25\16\25")
        buf.write("\u01f4\3\26\6\26\u01f8\n\26\r\26\16\26\u01f9\3\27\6\27")
        buf.write("\u01fd\n\27\r\27\16\27\u01fe\3\30\6\30\u0202\n\30\r\30")
        buf.write("\16\30\u0203\3\31\6\31\u0207\n\31\r\31\16\31\u0208\3\32")
        buf.write("\6\32\u020c\n\32\r\32\16\32\u020d\3\33\6\33\u0211\n\33")
        buf.write("\r\33\16\33\u0212\3\34\6\34\u0216\n\34\r\34\16\34\u0217")
        buf.write("\3\35\6\35\u021b\n\35\r\35\16\35\u021c\3\36\6\36\u0220")
        buf.write("\n\36\r\36\16\36\u0221\3\37\3\37\3\37\3\37\3\37\3\37\3")
        buf.write("\37\3\37\3\37\5\37\u022d\n\37\3\37\3\37\3\37\3 \3 \3 ")
        buf.write("\3 \3 \5 \u0237\n \3 \5 \u023a\n \3 \5 \u023d\n \3 \5")
        buf.write(" \u0240\n \3 \3 \3 \3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u0259\n\"\3\"\3")
        buf.write("\"\3\"\3\"\3#\3#\3#\3#\3#\5#\u0264\n#\3#\5#\u0267\n#\3")
        buf.write("#\5#\u026a\n#\3#\5#\u026d\n#\3#\5#\u0270\n#\3#\5#\u0273")
        buf.write("\n#\3#\5#\u0276\n#\3#\5#\u0279\n#\3#\5#\u027c\n#\3#\5")
        buf.write("#\u027f\n#\3#\5#\u0282\n#\3#\5#\u0285\n#\3#\5#\u0288\n")
        buf.write("#\3#\5#\u028b\n#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\3$\3")
        buf.write("$\3%\3%\3%\3%\3%\3%\5%\u02a0\n%\3%\5%\u02a3\n%\3%\5%\u02a6")
        buf.write("\n%\3%\5%\u02a9\n%\3%\3%\5%\u02ad\n%\3%\5%\u02b0\n%\3")
        buf.write("%\5%\u02b3\n%\3%\3%\3%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3")
        buf.write("\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u02cc\n\'\3")
        buf.write("\'\5\'\u02cf\n\'\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3")
        buf.write("(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3)\3)\3)\3)\3)\5)\u02ec")
        buf.write("\n)\3)\3)\3)\5)\u02f1\n)\3)\3)\5)\u02f5\n)\3)\3)\5)\u02f9")
        buf.write("\n)\3)\5)\u02fc\n)\3)\3)\5)\u0300\n)\3)\3)\3)\3)\3)\3")
        buf.write("*\3*\3*\3*\3*\3*\5*\u030d\n*\3*\3*\3*\3*\3*\3*\3+\3+\3")
        buf.write("+\3+\3+\3+\3+\3+\3+\3+\3,\3,\3,\3,\3,\3,\3,\5,\u0326\n")
        buf.write(",\3,\5,\u0329\n,\3,\5,\u032c\n,\3,\5,\u032f\n,\3,\5,\u0332")
        buf.write("\n,\3,\3,\3,\3,\5,\u0338\n,\3,\3,\3,\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\3.\3.\3.\3.\3.\5.\u034c\n.\3.\5.\u034f\n")
        buf.write(".\3.\5.\u0352\n.\3.\3.\3.\3.\3/\3/\3/\3/\3/\3/\3/\5/\u035f")
        buf.write("\n/\3/\3/\3/\3/\3\60\3\60\3\60\3\60\3\60\5\60\u036a\n")
        buf.write("\60\3\60\3\60\3\60\3\60\3\60\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\5\61\u0378\n\61\3\61\3\61\3\61\3\62\3\62\3")
        buf.write("\62\3\62\3\62\3\62\3\62\3\62\3\62\3\63\3\63\3\63\3\63")
        buf.write("\3\63\5\63\u038b\n\63\3\63\3\63\3\63\3\63\3\64\3\64\3")
        buf.write("\64\3\64\3\64\3\64\3\64\5\64\u0398\n\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3\65\3\66\3\66\3\66")
        buf.write("\3\66\3\66\3\67\3\67\3\67\3\67\3\67\38\38\38\38\38\39")
        buf.write("\39\39\39\39\3:\3:\3:\3:\3:\3;\3;\3;\3;\3;\3<\3<\3<\3")
        buf.write("<\3<\3=\3=\3=\3=\3=\3>\3>\3>\3>\3>\3?\3?\3?\3?\3?\3@\3")
        buf.write("@\3@\3@\3@\3A\3A\3A\3A\3A\3B\3B\3B\3B\3B\3C\3C\3C\3C\3")
        buf.write("C\3D\3D\3D\3D\3D\3E\3E\3E\3E\3E\3F\3F\3F\3F\3F\3G\3G\3")
        buf.write("G\3G\3G\3H\3H\3H\3H\3H\3I\3I\3I\3I\3I\3J\3J\3J\3J\3J\3")
        buf.write("K\3K\3K\3K\3K\3L\3L\3L\3L\3L\3M\3M\3M\3M\3M\3N\3N\3N\3")
        buf.write("N\3N\3O\3O\3O\3O\3O\3P\3P\3P\3P\3P\3Q\3Q\3Q\3Q\3Q\3R\3")
        buf.write("R\3R\3R\3R\3S\3S\3S\3S\3S\3T\3T\3T\3T\3T\3U\3U\3U\3U\3")
        buf.write("U\3V\3V\3V\3V\3V\3W\3W\3W\3W\3W\3X\3X\3X\3X\3X\3Y\3Y\3")
        buf.write("Y\3Y\3Y\3Z\3Z\3Z\3Z\3Z\3[\3[\3[\3[\3[\3\\\3\\\3\\\3\\")
        buf.write("\3\\\3]\3]\3]\3]\3]\3^\3^\3^\3^\7^\u0471\n^\f^\16^\u0474")
        buf.write("\13^\3^\3^\3^\3_\3_\3_\3_\3_\3`\3`\3`\3`\3`\3a\3a\3a\3")
        buf.write("a\3a\3b\3b\3b\3b\3b\3c\3c\3c\3c\3c\3d\3d\3d\3d\3d\3e\3")
        buf.write("e\3e\3e\3e\3f\3f\3f\3f\3f\3g\3g\3g\7g\u04a4\ng\fg\16g")
        buf.write("\u04a7\13g\3g\3g\3h\3h\3h\3h\7h\u04af\nh\fh\16h\u04b2")
        buf.write("\13h\3h\3h\3i\3i\3i\7i\u04b9\ni\fi\16i\u04bc\13i\3i\3")
        buf.write("i\3j\3j\3j\3j\3j\3k\3k\3k\3k\3k\3l\3l\3l\3l\3l\3m\3m\3")
        buf.write("m\3m\3m\3n\3n\3n\3n\3n\3o\3o\3o\3o\3o\3p\3p\3p\3p\3p\3")
        buf.write("q\3q\3q\3q\3q\3r\3r\3r\3r\3r\3s\3s\3s\3s\3s\3t\3t\3t\3")
        buf.write("t\3t\3u\3u\3u\3u\3u\3v\3v\3v\3v\3v\3w\3w\3w\3w\3w\3x\3")
        buf.write("x\3x\3x\5x\u050a\nx\3x\5x\u050d\nx\3x\5x\u0510\nx\3x\5")
        buf.write("x\u0513\nx\3x\5x\u0516\nx\3x\5x\u0519\nx\3x\5x\u051c\n")
        buf.write("x\3x\5x\u051f\nx\3x\5x\u0522\nx\3x\3x\3x\3y\3y\3y\3y\3")
        buf.write("y\3z\3z\3z\3z\3z\3{\3{\3{\3{\3{\3|\3|\3|\3|\3|\3}\3}\3")
        buf.write("}\3}\3}\3~\3~\3~\3~\3~\3\177\3\177\3\177\3\177\3\177\3")
        buf.write("\u0080\3\u0080\3\u0080\3\u0080\7\u0080\u054e\n\u0080\f")
        buf.write("\u0080\16\u0080\u0551\13\u0080\3\u0080\3\u0080\3\u0080")
        buf.write("\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u055a\n\u0081")
        buf.write("\3\u0081\5\u0081\u055d\n\u0081\3\u0081\5\u0081\u0560\n")
        buf.write("\u0081\3\u0081\5\u0081\u0563\n\u0081\3\u0081\5\u0081\u0566")
        buf.write("\n\u0081\3\u0081\5\u0081\u0569\n\u0081\3\u0081\5\u0081")
        buf.write("\u056c\n\u0081\3\u0081\5\u0081\u056f\n\u0081\3\u0081\3")
        buf.write("\u0081\3\u0081\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write("\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0084\3\u0084")
        buf.write("\3\u0084\3\u0084\3\u0084\3\u0085\3\u0085\3\u0085\3\u0085")
        buf.write("\3\u0085\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0087")
        buf.write("\3\u0087\3\u0087\3\u0087\3\u0087\3\u0088\3\u0088\3\u0088")
        buf.write("\3\u0088\3\u0088\3\u0089\3\u0089\3\u0089\3\u0089\3\u0089")
        buf.write("\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008b\3\u008b")
        buf.write("\3\u008b\3\u008b\3\u008b\3\u008c\3\u008c\3\u008c\3\u008c")
        buf.write("\3\u008c\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008e")
        buf.write("\3\u008e\3\u008e\3\u008e\3\u008e\3\u008f\3\u008f\3\u008f")
        buf.write("\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f")
        buf.write("\3\u008f\3\u008f\5\u008f\u05c1\n\u008f\3\u0090\3\u0090")
        buf.write("\3\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091\3\u0091")
        buf.write("\3\u0091\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0093")
        buf.write("\3\u0093\3\u0093\3\u0093\3\u0093\3\u0094\3\u0094\3\u0094")
        buf.write("\3\u0094\3\u0094\3\u0095\3\u0095\3\u0095\3\u0095\3\u0095")
        buf.write("\3\u0096\3\u0096\3\u0096\3\u0096\3\u0096\3\u0097\3\u0097")
        buf.write("\3\u0097\3\u0097\3\u0097\3\u0098\3\u0098\3\u0098\3\u0098")
        buf.write("\3\u0098\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u009a")
        buf.write("\3\u009a\3\u009a\3\u009a\3\u009a\3\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\3\u009c\3\u009c\3\u009c\3\u009c\3\u009c")
        buf.write("\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\3\u009e\3\u009e")
        buf.write("\3\u009e\3\u009e\7\u009e\u060d\n\u009e\f\u009e\16\u009e")
        buf.write("\u0610\13\u009e\3\u009e\3\u009e\3\u009e\3\u009f\3\u009f")
        buf.write("\3\u009f\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a0\3\u00a1\7\u00a1\u0620\n\u00a1\f\u00a1\16\u00a1")
        buf.write("\u0623\13\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3\3\u00a3")
        buf.write("\7\u00a3\u064d\n\u00a3\f\u00a3\16\u00a3\u0650\13\u00a3")
        buf.write("\3\u00a3\3\u00a3\3\u00a3\5\u00a3\u0655\n\u00a3\3\u00a4")
        buf.write("\3\u00a4\3\u00a4\3\u00a4\3\u00a4\3\u00a5\3\u00a5\3\u00a5")
        buf.write("\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6\3\u00a6\3\u00a6")
        buf.write("\3\u00a7\3\u00a7\3\u00a7\3\u00a7\7\u00a7\u066a\n\u00a7")
        buf.write("\f\u00a7\16\u00a7\u066d\13\u00a7\3\u00a7\3\u00a7\3\u00a7")
        buf.write("\3\u00a8\3\u00a8\3\u00a8\3\u00a8\7\u00a8\u0676\n\u00a8")
        buf.write("\f\u00a8\16\u00a8\u0679\13\u00a8\3\u00a8\3\u00a8\3\u00a8")
        buf.write("\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00aa\3\u00aa")
        buf.write("\3\u00aa\3\u00aa\3\u00aa\3\u00ab\3\u00ab\3\u00ab\3\u00ab")
        buf.write("\3\u00ab\3\u00ac\3\u00ac\3\u00ac\2\2\u00ad\2\4\6\b\n\f")
        buf.write("\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@")
        buf.write("BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc")
        buf.write("\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce")
        buf.write("\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0")
        buf.write("\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2")
        buf.write("\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104")
        buf.write("\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116")
        buf.write("\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128")
        buf.write("\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a")
        buf.write("\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c")
        buf.write("\u014e\u0150\u0152\u0154\u0156\2\4\3\2\u008a\u008b\4\2")
        buf.write("\u0082\u0082\u008a\u008c\2\u065c\2\u0158\3\2\2\2\4\u015a")
        buf.write("\3\2\2\2\6\u0162\3\2\2\2\b\u0167\3\2\2\2\n\u016d\3\2\2")
        buf.write("\2\f\u0172\3\2\2\2\16\u01b0\3\2\2\2\20\u01b6\3\2\2\2\22")
        buf.write("\u01bb\3\2\2\2\24\u01c0\3\2\2\2\26\u01c5\3\2\2\2\30\u01ca")
        buf.write("\3\2\2\2\32\u01cf\3\2\2\2\34\u01d4\3\2\2\2\36\u01d9\3")
        buf.write("\2\2\2 \u01de\3\2\2\2\"\u01e3\3\2\2\2$\u01e8\3\2\2\2&")
        buf.write("\u01ed\3\2\2\2(\u01f2\3\2\2\2*\u01f7\3\2\2\2,\u01fc\3")
        buf.write("\2\2\2.\u0201\3\2\2\2\60\u0206\3\2\2\2\62\u020b\3\2\2")
        buf.write("\2\64\u0210\3\2\2\2\66\u0215\3\2\2\28\u021a\3\2\2\2:\u021f")
        buf.write("\3\2\2\2<\u0223\3\2\2\2>\u0231\3\2\2\2@\u0244\3\2\2\2")
        buf.write("B\u024f\3\2\2\2D\u025e\3\2\2\2F\u028f\3\2\2\2H\u0299\3")
        buf.write("\2\2\2J\u02b7\3\2\2\2L\u02c1\3\2\2\2N\u02d6\3\2\2\2P\u02e6")
        buf.write("\3\2\2\2R\u0306\3\2\2\2T\u0314\3\2\2\2V\u031e\3\2\2\2")
        buf.write("X\u033c\3\2\2\2Z\u0346\3\2\2\2\\\u0357\3\2\2\2^\u0364")
        buf.write("\3\2\2\2`\u0370\3\2\2\2b\u037c\3\2\2\2d\u0385\3\2\2\2")
        buf.write("f\u0390\3\2\2\2h\u039f\3\2\2\2j\u03a4\3\2\2\2l\u03a9\3")
        buf.write("\2\2\2n\u03ae\3\2\2\2p\u03b3\3\2\2\2r\u03b8\3\2\2\2t\u03bd")
        buf.write("\3\2\2\2v\u03c2\3\2\2\2x\u03c7\3\2\2\2z\u03cc\3\2\2\2")
        buf.write("|\u03d1\3\2\2\2~\u03d6\3\2\2\2\u0080\u03db\3\2\2\2\u0082")
        buf.write("\u03e0\3\2\2\2\u0084\u03e5\3\2\2\2\u0086\u03ea\3\2\2\2")
        buf.write("\u0088\u03ef\3\2\2\2\u008a\u03f4\3\2\2\2\u008c\u03f9\3")
        buf.write("\2\2\2\u008e\u03fe\3\2\2\2\u0090\u0403\3\2\2\2\u0092\u0408")
        buf.write("\3\2\2\2\u0094\u040d\3\2\2\2\u0096\u0412\3\2\2\2\u0098")
        buf.write("\u0417\3\2\2\2\u009a\u041c\3\2\2\2\u009c\u0421\3\2\2\2")
        buf.write("\u009e\u0426\3\2\2\2\u00a0\u042b\3\2\2\2\u00a2\u0430\3")
        buf.write("\2\2\2\u00a4\u0435\3\2\2\2\u00a6\u043a\3\2\2\2\u00a8\u043f")
        buf.write("\3\2\2\2\u00aa\u0444\3\2\2\2\u00ac\u0449\3\2\2\2\u00ae")
        buf.write("\u044e\3\2\2\2\u00b0\u0453\3\2\2\2\u00b2\u0458\3\2\2\2")
        buf.write("\u00b4\u045d\3\2\2\2\u00b6\u0462\3\2\2\2\u00b8\u0467\3")
        buf.write("\2\2\2\u00ba\u046c\3\2\2\2\u00bc\u0478\3\2\2\2\u00be\u047d")
        buf.write("\3\2\2\2\u00c0\u0482\3\2\2\2\u00c2\u0487\3\2\2\2\u00c4")
        buf.write("\u048c\3\2\2\2\u00c6\u0491\3\2\2\2\u00c8\u0496\3\2\2\2")
        buf.write("\u00ca\u049b\3\2\2\2\u00cc\u04a0\3\2\2\2\u00ce\u04aa\3")
        buf.write("\2\2\2\u00d0\u04b5\3\2\2\2\u00d2\u04bf\3\2\2\2\u00d4\u04c4")
        buf.write("\3\2\2\2\u00d6\u04c9\3\2\2\2\u00d8\u04ce\3\2\2\2\u00da")
        buf.write("\u04d3\3\2\2\2\u00dc\u04d8\3\2\2\2\u00de\u04dd\3\2\2\2")
        buf.write("\u00e0\u04e2\3\2\2\2\u00e2\u04e7\3\2\2\2\u00e4\u04ec\3")
        buf.write("\2\2\2\u00e6\u04f1\3\2\2\2\u00e8\u04f6\3\2\2\2\u00ea\u04fb")
        buf.write("\3\2\2\2\u00ec\u0500\3\2\2\2\u00ee\u0505\3\2\2\2\u00f0")
        buf.write("\u0526\3\2\2\2\u00f2\u052b\3\2\2\2\u00f4\u0530\3\2\2\2")
        buf.write("\u00f6\u0535\3\2\2\2\u00f8\u053a\3\2\2\2\u00fa\u053f\3")
        buf.write("\2\2\2\u00fc\u0544\3\2\2\2\u00fe\u0549\3\2\2\2\u0100\u0555")
        buf.write("\3\2\2\2\u0102\u0573\3\2\2\2\u0104\u0578\3\2\2\2\u0106")
        buf.write("\u057d\3\2\2\2\u0108\u0582\3\2\2\2\u010a\u0587\3\2\2\2")
        buf.write("\u010c\u058c\3\2\2\2\u010e\u0591\3\2\2\2\u0110\u0596\3")
        buf.write("\2\2\2\u0112\u059b\3\2\2\2\u0114\u05a0\3\2\2\2\u0116\u05a5")
        buf.write("\3\2\2\2\u0118\u05aa\3\2\2\2\u011a\u05af\3\2\2\2\u011c")
        buf.write("\u05c0\3\2\2\2\u011e\u05c2\3\2\2\2\u0120\u05c7\3\2\2\2")
        buf.write("\u0122\u05cc\3\2\2\2\u0124\u05d1\3\2\2\2\u0126\u05d6\3")
        buf.write("\2\2\2\u0128\u05db\3\2\2\2\u012a\u05e0\3\2\2\2\u012c\u05e5")
        buf.write("\3\2\2\2\u012e\u05ea\3\2\2\2\u0130\u05ef\3\2\2\2\u0132")
        buf.write("\u05f4\3\2\2\2\u0134\u05f9\3\2\2\2\u0136\u05fe\3\2\2\2")
        buf.write("\u0138\u0603\3\2\2\2\u013a\u0608\3\2\2\2\u013c\u0614\3")
        buf.write("\2\2\2\u013e\u0619\3\2\2\2\u0140\u0621\3\2\2\2\u0142\u0624")
        buf.write("\3\2\2\2\u0144\u0654\3\2\2\2\u0146\u0656\3\2\2\2\u0148")
        buf.write("\u065b\3\2\2\2\u014a\u0660\3\2\2\2\u014c\u0665\3\2\2\2")
        buf.write("\u014e\u0671\3\2\2\2\u0150\u067d\3\2\2\2\u0152\u0682\3")
        buf.write("\2\2\2\u0154\u0687\3\2\2\2\u0156\u068c\3\2\2\2\u0158\u0159")
        buf.write("\5\4\3\2\u0159\3\3\2\2\2\u015a\u015b\7\3\2\2\u015b\u015c")
        buf.write("\5\6\4\2\u015c\u015d\5\b\5\2\u015d\u015e\5\n\6\2\u015e")
        buf.write("\u015f\5\f\7\2\u015f\u0160\5\16\b\2\u0160\u0161\7\4\2")
        buf.write("\2\u0161\5\3\2\2\2\u0162\u0163\7\5\2\2\u0163\u0164\7\6")
        buf.write("\2\2\u0164\u0165\7\u0082\2\2\u0165\u0166\7\7\2\2\u0166")
        buf.write("\7\3\2\2\2\u0167\u0168\7~\2\2\u0168\u0169\7\6\2\2\u0169")
        buf.write("\u016a\7\3\2\2\u016a\u016b\7\4\2\2\u016b\u016c\7\7\2\2")
        buf.write("\u016c\t\3\2\2\2\u016d\u016e\7\b\2\2\u016e\u016f\7\6\2")
        buf.write("\2\u016f\u0170\7\u0082\2\2\u0170\u0171\7\7\2\2\u0171\13")
        buf.write("\3\2\2\2\u0172\u0173\7\u0080\2\2\u0173\u0174\7\6\2\2\u0174")
        buf.write("\u0176\7\3\2\2\u0175\u0177\5\20\t\2\u0176\u0175\3\2\2")
        buf.write("\2\u0176\u0177\3\2\2\2\u0177\u0179\3\2\2\2\u0178\u017a")
        buf.write("\5\22\n\2\u0179\u0178\3\2\2\2\u0179\u017a\3\2\2\2\u017a")
        buf.write("\u017c\3\2\2\2\u017b\u017d\5\24\13\2\u017c\u017b\3\2\2")
        buf.write("\2\u017c\u017d\3\2\2\2\u017d\u017f\3\2\2\2\u017e\u0180")
        buf.write("\5\26\f\2\u017f\u017e\3\2\2\2\u017f\u0180\3\2\2\2\u0180")
        buf.write("\u0181\3\2\2\2\u0181\u0183\5\30\r\2\u0182\u0184\5\32\16")
        buf.write("\2\u0183\u0182\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u0185")
        buf.write("\3\2\2\2\u0185\u0187\5\34\17\2\u0186\u0188\5\36\20\2\u0187")
        buf.write("\u0186\3\2\2\2\u0187\u0188\3\2\2\2\u0188\u018a\3\2\2\2")
        buf.write("\u0189\u018b\5\"\22\2\u018a\u0189\3\2\2\2\u018a\u018b")
        buf.write("\3\2\2\2\u018b\u018d\3\2\2\2\u018c\u018e\5 \21\2\u018d")
        buf.write("\u018c\3\2\2\2\u018d\u018e\3\2\2\2\u018e\u018f\3\2\2\2")
        buf.write("\u018f\u0191\5$\23\2\u0190\u0192\5&\24\2\u0191\u0190\3")
        buf.write("\2\2\2\u0191\u0192\3\2\2\2\u0192\u0194\3\2\2\2\u0193\u0195")
        buf.write("\5(\25\2\u0194\u0193\3\2\2\2\u0194\u0195\3\2\2\2\u0195")
        buf.write("\u0197\3\2\2\2\u0196\u0198\5*\26\2\u0197\u0196\3\2\2\2")
        buf.write("\u0197\u0198\3\2\2\2\u0198\u019a\3\2\2\2\u0199\u019b\5")
        buf.write(",\27\2\u019a\u0199\3\2\2\2\u019a\u019b\3\2\2\2\u019b\u019d")
        buf.write("\3\2\2\2\u019c\u019e\5.\30\2\u019d\u019c\3\2\2\2\u019d")
        buf.write("\u019e\3\2\2\2\u019e\u01a0\3\2\2\2\u019f\u01a1\5\60\31")
        buf.write("\2\u01a0\u019f\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a2")
        buf.write("\3\2\2\2\u01a2\u01a3\5\62\32\2\u01a3\u01a5\5\64\33\2\u01a4")
        buf.write("\u01a6\5\66\34\2\u01a5\u01a4\3\2\2\2\u01a5\u01a6\3\2\2")
        buf.write("\2\u01a6\u01a8\3\2\2\2\u01a7\u01a9\58\35\2\u01a8\u01a7")
        buf.write("\3\2\2\2\u01a8\u01a9\3\2\2\2\u01a9\u01ab\3\2\2\2\u01aa")
        buf.write("\u01ac\5:\36\2\u01ab\u01aa\3\2\2\2\u01ab\u01ac\3\2\2\2")
        buf.write("\u01ac\u01ad\3\2\2\2\u01ad\u01ae\7\4\2\2\u01ae\u01af\7")
        buf.write("\7\2\2\u01af\r\3\2\2\2\u01b0\u01b1\7\u0081\2\2\u01b1\u01b2")
        buf.write("\7\6\2\2\u01b2\u01b3\7\u0089\2\2\u01b3\u01b4\7\7\2\2\u01b4")
        buf.write("\17\3\2\2\2\u01b5\u01b7\5<\37\2\u01b6\u01b5\3\2\2\2\u01b7")
        buf.write("\u01b8\3\2\2\2\u01b8\u01b6\3\2\2\2\u01b8\u01b9\3\2\2\2")
        buf.write("\u01b9\21\3\2\2\2\u01ba\u01bc\5> \2\u01bb\u01ba\3\2\2")
        buf.write("\2\u01bc\u01bd\3\2\2\2\u01bd\u01bb\3\2\2\2\u01bd\u01be")
        buf.write("\3\2\2\2\u01be\23\3\2\2\2\u01bf\u01c1\5@!\2\u01c0\u01bf")
        buf.write("\3\2\2\2\u01c1\u01c2\3\2\2\2\u01c2\u01c0\3\2\2\2\u01c2")
        buf.write("\u01c3\3\2\2\2\u01c3\25\3\2\2\2\u01c4\u01c6\5B\"\2\u01c5")
        buf.write("\u01c4\3\2\2\2\u01c6\u01c7\3\2\2\2\u01c7\u01c5\3\2\2\2")
        buf.write("\u01c7\u01c8\3\2\2\2\u01c8\27\3\2\2\2\u01c9\u01cb\5D#")
        buf.write("\2\u01ca\u01c9\3\2\2\2\u01cb\u01cc\3\2\2\2\u01cc\u01ca")
        buf.write("\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\31\3\2\2\2\u01ce\u01d0")
        buf.write("\5F$\2\u01cf\u01ce\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1\u01cf")
        buf.write("\3\2\2\2\u01d1\u01d2\3\2\2\2\u01d2\33\3\2\2\2\u01d3\u01d5")
        buf.write("\5H%\2\u01d4\u01d3\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6\u01d4")
        buf.write("\3\2\2\2\u01d6\u01d7\3\2\2\2\u01d7\35\3\2\2\2\u01d8\u01da")
        buf.write("\5J&\2\u01d9\u01d8\3\2\2\2\u01da\u01db\3\2\2\2\u01db\u01d9")
        buf.write("\3\2\2\2\u01db\u01dc\3\2\2\2\u01dc\37\3\2\2\2\u01dd\u01df")
        buf.write("\5L\'\2\u01de\u01dd\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0")
        buf.write("\u01de\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1!\3\2\2\2\u01e2")
        buf.write("\u01e4\5N(\2\u01e3\u01e2\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5")
        buf.write("\u01e3\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6#\3\2\2\2\u01e7")
        buf.write("\u01e9\5P)\2\u01e8\u01e7\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea")
        buf.write("\u01e8\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb%\3\2\2\2\u01ec")
        buf.write("\u01ee\5R*\2\u01ed\u01ec\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef")
        buf.write("\u01ed\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\'\3\2\2\2\u01f1")
        buf.write("\u01f3\5T+\2\u01f2\u01f1\3\2\2\2\u01f3\u01f4\3\2\2\2\u01f4")
        buf.write("\u01f2\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5)\3\2\2\2\u01f6")
        buf.write("\u01f8\5V,\2\u01f7\u01f6\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9")
        buf.write("\u01f7\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa+\3\2\2\2\u01fb")
        buf.write("\u01fd\5X-\2\u01fc\u01fb\3\2\2\2\u01fd\u01fe\3\2\2\2\u01fe")
        buf.write("\u01fc\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff-\3\2\2\2\u0200")
        buf.write("\u0202\5Z.\2\u0201\u0200\3\2\2\2\u0202\u0203\3\2\2\2\u0203")
        buf.write("\u0201\3\2\2\2\u0203\u0204\3\2\2\2\u0204/\3\2\2\2\u0205")
        buf.write("\u0207\5\\/\2\u0206\u0205\3\2\2\2\u0207\u0208\3\2\2\2")
        buf.write("\u0208\u0206\3\2\2\2\u0208\u0209\3\2\2\2\u0209\61\3\2")
        buf.write("\2\2\u020a\u020c\5^\60\2\u020b\u020a\3\2\2\2\u020c\u020d")
        buf.write("\3\2\2\2\u020d\u020b\3\2\2\2\u020d\u020e\3\2\2\2\u020e")
        buf.write("\63\3\2\2\2\u020f\u0211\5`\61\2\u0210\u020f\3\2\2\2\u0211")
        buf.write("\u0212\3\2\2\2\u0212\u0210\3\2\2\2\u0212\u0213\3\2\2\2")
        buf.write("\u0213\65\3\2\2\2\u0214\u0216\5b\62\2\u0215\u0214\3\2")
        buf.write("\2\2\u0216\u0217\3\2\2\2\u0217\u0215\3\2\2\2\u0217\u0218")
        buf.write("\3\2\2\2\u0218\67\3\2\2\2\u0219\u021b\5d\63\2\u021a\u0219")
        buf.write("\3\2\2\2\u021b\u021c\3\2\2\2\u021c\u021a\3\2\2\2\u021c")
        buf.write("\u021d\3\2\2\2\u021d9\3\2\2\2\u021e\u0220\5f\64\2\u021f")
        buf.write("\u021e\3\2\2\2\u0220\u0221\3\2\2\2\u0221\u021f\3\2\2\2")
        buf.write("\u0221\u0222\3\2\2\2\u0222;\3\2\2\2\u0223\u0224\7\u0089")
        buf.write("\2\2\u0224\u0225\7\6\2\2\u0225\u0226\7\3\2\2\u0226\u0227")
        buf.write("\5h\65\2\u0227\u0228\5\u00d2j\2\u0228\u0229\5\u00d4k\2")
        buf.write("\u0229\u022a\5\u00e0q\2\u022a\u022c\5\u00c0a\2\u022b\u022d")
        buf.write("\5\u00e2r\2\u022c\u022b\3\2\2\2\u022c\u022d\3\2\2\2\u022d")
        buf.write("\u022e\3\2\2\2\u022e\u022f\7\4\2\2\u022f\u0230\7\7\2\2")
        buf.write("\u0230=\3\2\2\2\u0231\u0232\7\u0089\2\2\u0232\u0233\7")
        buf.write("\6\2\2\u0233\u0234\7\3\2\2\u0234\u0236\5j\66\2\u0235\u0237")
        buf.write("\5\u0094K\2\u0236\u0235\3\2\2\2\u0236\u0237\3\2\2\2\u0237")
        buf.write("\u0239\3\2\2\2\u0238\u023a\5\u00b2Z\2\u0239\u0238\3\2")
        buf.write("\2\2\u0239\u023a\3\2\2\2\u023a\u023c\3\2\2\2\u023b\u023d")
        buf.write("\5\u0096L\2\u023c\u023b\3\2\2\2\u023c\u023d\3\2\2\2\u023d")
        buf.write("\u023f\3\2\2\2\u023e\u0240\5\u014c\u00a7\2\u023f\u023e")
        buf.write("\3\2\2\2\u023f\u0240\3\2\2\2\u0240\u0241\3\2\2\2\u0241")
        buf.write("\u0242\7\4\2\2\u0242\u0243\7\7\2\2\u0243?\3\2\2\2\u0244")
        buf.write("\u0245\7\u0089\2\2\u0245\u0246\7\6\2\2\u0246\u0247\7\3")
        buf.write("\2\2\u0247\u0248\5l\67\2\u0248\u0249\5\u0098M\2\u0249")
        buf.write("\u024a\5\u009aN\2\u024a\u024b\5\u009cO\2\u024b\u024c\5")
        buf.write("\u009eP\2\u024c\u024d\7\4\2\2\u024d\u024e\7\7\2\2\u024e")
        buf.write("A\3\2\2\2\u024f\u0250\7\u0089\2\2\u0250\u0251\7\6\2\2")
        buf.write("\u0251\u0252\7\3\2\2\u0252\u0253\5n8\2\u0253\u0254\5\u00c6")
        buf.write("d\2\u0254\u0255\5\u013c\u009f\2\u0255\u0256\5\u013e\u00a0")
        buf.write("\2\u0256\u0258\5\u00c8e\2\u0257\u0259\5\u00c0a\2\u0258")
        buf.write("\u0257\3\2\2\2\u0258\u0259\3\2\2\2\u0259\u025a\3\2\2\2")
        buf.write("\u025a\u025b\5\u00caf\2\u025b\u025c\7\4\2\2\u025c\u025d")
        buf.write("\7\7\2\2\u025dC\3\2\2\2\u025e\u025f\7\u0089\2\2\u025f")
        buf.write("\u0260\7\6\2\2\u0260\u0261\7\3\2\2\u0261\u0263\5p9\2\u0262")
        buf.write("\u0264\5\u00a2R\2\u0263\u0262\3\2\2\2\u0263\u0264\3\2")
        buf.write("\2\2\u0264\u0266\3\2\2\2\u0265\u0267\5\u00a4S\2\u0266")
        buf.write("\u0265\3\2\2\2\u0266\u0267\3\2\2\2\u0267\u0269\3\2\2\2")
        buf.write("\u0268\u026a\5\u00a0Q\2\u0269\u0268\3\2\2\2\u0269\u026a")
        buf.write("\3\2\2\2\u026a\u026c\3\2\2\2\u026b\u026d\5\u00a8U\2\u026c")
        buf.write("\u026b\3\2\2\2\u026c\u026d\3\2\2\2\u026d\u026f\3\2\2\2")
        buf.write("\u026e\u0270\5\u00aaV\2\u026f\u026e\3\2\2\2\u026f\u0270")
        buf.write("\3\2\2\2\u0270\u0272\3\2\2\2\u0271\u0273\5\u00a6T\2\u0272")
        buf.write("\u0271\3\2\2\2\u0272\u0273\3\2\2\2\u0273\u0275\3\2\2\2")
        buf.write("\u0274\u0276\5\u00e8u\2\u0275\u0274\3\2\2\2\u0275\u0276")
        buf.write("\3\2\2\2\u0276\u0278\3\2\2\2\u0277\u0279\5\u00c0a\2\u0278")
        buf.write("\u0277\3\2\2\2\u0278\u0279\3\2\2\2\u0279\u027b\3\2\2\2")
        buf.write("\u027a\u027c\5\u00c2b\2\u027b\u027a\3\2\2\2\u027b\u027c")
        buf.write("\3\2\2\2\u027c\u027e\3\2\2\2\u027d\u027f\5\u00ecw\2\u027e")
        buf.write("\u027d\3\2\2\2\u027e\u027f\3\2\2\2\u027f\u0281\3\2\2\2")
        buf.write("\u0280\u0282\5\u00c4c\2\u0281\u0280\3\2\2\2\u0281\u0282")
        buf.write("\3\2\2\2\u0282\u0284\3\2\2\2\u0283\u0285\5\u00acW\2\u0284")
        buf.write("\u0283\3\2\2\2\u0284\u0285\3\2\2\2\u0285\u0287\3\2\2\2")
        buf.write("\u0286\u0288\5\u00eav\2\u0287\u0286\3\2\2\2\u0287\u0288")
        buf.write("\3\2\2\2\u0288\u028a\3\2\2\2\u0289\u028b\5\u00aeX\2\u028a")
        buf.write("\u0289\3\2\2\2\u028a\u028b\3\2\2\2\u028b\u028c\3\2\2\2")
        buf.write("\u028c\u028d\7\4\2\2\u028d\u028e\7\7\2\2\u028eE\3\2\2")
        buf.write("\2\u028f\u0290\7\u0089\2\2\u0290\u0291\7\6\2\2\u0291\u0292")
        buf.write("\7\3\2\2\u0292\u0293\5r:\2\u0293\u0294\5\u00c6d\2\u0294")
        buf.write("\u0295\5\u00c8e\2\u0295\u0296\5\u00caf\2\u0296\u0297\7")
        buf.write("\4\2\2\u0297\u0298\7\7\2\2\u0298G\3\2\2\2\u0299\u029a")
        buf.write("\7\u0089\2\2\u029a\u029b\7\6\2\2\u029b\u029c\7\3\2\2\u029c")
        buf.write("\u029d\5t;\2\u029d\u029f\5\u00b4[\2\u029e\u02a0\5\u00aa")
        buf.write("V\2\u029f\u029e\3\2\2\2\u029f\u02a0\3\2\2\2\u02a0\u02a2")
        buf.write("\3\2\2\2\u02a1\u02a3\5\u00a8U\2\u02a2\u02a1\3\2\2\2\u02a2")
        buf.write("\u02a3\3\2\2\2\u02a3\u02a5\3\2\2\2\u02a4\u02a6\5\u00c0")
        buf.write("a\2\u02a5\u02a4\3\2\2\2\u02a5\u02a6\3\2\2\2\u02a6\u02a8")
        buf.write("\3\2\2\2\u02a7\u02a9\5\u00c2b\2\u02a8\u02a7\3\2\2\2\u02a8")
        buf.write("\u02a9\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa\u02ac\5\u00c4")
        buf.write("c\2\u02ab\u02ad\5\u00acW\2\u02ac\u02ab\3\2\2\2\u02ac\u02ad")
        buf.write("\3\2\2\2\u02ad\u02af\3\2\2\2\u02ae\u02b0\5\u00aeX\2\u02af")
        buf.write("\u02ae\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b2\3\2\2\2")
        buf.write("\u02b1\u02b3\5\u00b0Y\2\u02b2\u02b1\3\2\2\2\u02b2\u02b3")
        buf.write("\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4\u02b5\7\4\2\2\u02b5")
        buf.write("\u02b6\7\7\2\2\u02b6I\3\2\2\2\u02b7\u02b8\7\u0089\2\2")
        buf.write("\u02b8\u02b9\7\6\2\2\u02b9\u02ba\7\3\2\2\u02ba\u02bb\5")
        buf.write("v<\2\u02bb\u02bc\5\u00c6d\2\u02bc\u02bd\5\u00c8e\2\u02bd")
        buf.write("\u02be\5\u00caf\2\u02be\u02bf\7\4\2\2\u02bf\u02c0\7\7")
        buf.write("\2\2\u02c0K\3\2\2\2\u02c1\u02c2\7\u0089\2\2\u02c2\u02c3")
        buf.write("\7\6\2\2\u02c3\u02c4\7\3\2\2\u02c4\u02c5\5x=\2\u02c5\u02c6")
        buf.write("\5\u00d2j\2\u02c6\u02c7\5\u00d4k\2\u02c7\u02c8\5\u00d6")
        buf.write("l\2\u02c8\u02c9\5\u00e0q\2\u02c9\u02cb\5\u00c0a\2\u02ca")
        buf.write("\u02cc\5\u00b6\\\2\u02cb\u02ca\3\2\2\2\u02cb\u02cc\3\2")
        buf.write("\2\2\u02cc\u02ce\3\2\2\2\u02cd\u02cf\5\u00be`\2\u02ce")
        buf.write("\u02cd\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u02d0\3\2\2\2")
        buf.write("\u02d0\u02d1\5\u00e2r\2\u02d1\u02d2\5\u00e4s\2\u02d2\u02d3")
        buf.write("\5\u00e6t\2\u02d3\u02d4\7\4\2\2\u02d4\u02d5\7\7\2\2\u02d5")
        buf.write("M\3\2\2\2\u02d6\u02d7\7\u0089\2\2\u02d7\u02d8\7\6\2\2")
        buf.write("\u02d8\u02d9\7\3\2\2\u02d9\u02da\5z>\2\u02da\u02db\5\u00d8")
        buf.write("m\2\u02db\u02dc\5\u00d2j\2\u02dc\u02dd\5\u00d4k\2\u02dd")
        buf.write("\u02de\5\u00dan\2\u02de\u02df\5\u00dco\2\u02df\u02e0\5")
        buf.write("\u00e0q\2\u02e0\u02e1\5\u00c0a\2\u02e1\u02e2\5\u00dep")
        buf.write("\2\u02e2\u02e3\5\u00e2r\2\u02e3\u02e4\7\4\2\2\u02e4\u02e5")
        buf.write("\7\7\2\2\u02e5O\3\2\2\2\u02e6\u02e7\7\u0089\2\2\u02e7")
        buf.write("\u02e8\7\6\2\2\u02e8\u02e9\7\3\2\2\u02e9\u02eb\5|?\2\u02ea")
        buf.write("\u02ec\5\u00eex\2\u02eb\u02ea\3\2\2\2\u02eb\u02ec\3\2")
        buf.write("\2\2\u02ec\u02ed\3\2\2\2\u02ed\u02ee\5\u00d2j\2\u02ee")
        buf.write("\u02f0\5\u010c\u0087\2\u02ef\u02f1\5\u010e\u0088\2\u02f0")
        buf.write("\u02ef\3\2\2\2\u02f0\u02f1\3\2\2\2\u02f1\u02f2\3\2\2\2")
        buf.write("\u02f2\u02f4\5\u0110\u0089\2\u02f3\u02f5\5\u0112\u008a")
        buf.write("\2\u02f4\u02f3\3\2\2\2\u02f4\u02f5\3\2\2\2\u02f5\u02f6")
        buf.write("\3\2\2\2\u02f6\u02f8\5\u0114\u008b\2\u02f7\u02f9\5\u0118")
        buf.write("\u008d\2\u02f8\u02f7\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9")
        buf.write("\u02fb\3\2\2\2\u02fa\u02fc\5\u0116\u008c\2\u02fb\u02fa")
        buf.write("\3\2\2\2\u02fb\u02fc\3\2\2\2\u02fc\u02fd\3\2\2\2\u02fd")
        buf.write("\u02ff\5\u011a\u008e\2\u02fe\u0300\5\u011c\u008f\2\u02ff")
        buf.write("\u02fe\3\2\2\2\u02ff\u0300\3\2\2\2\u0300\u0301\3\2\2\2")
        buf.write("\u0301\u0302\5\u011e\u0090\2\u0302\u0303\5\u0120\u0091")
        buf.write("\2\u0303\u0304\7\4\2\2\u0304\u0305\7\7\2\2\u0305Q\3\2")
        buf.write("\2\2\u0306\u0307\7\u0089\2\2\u0307\u0308\7\6\2\2\u0308")
        buf.write("\u0309\7\3\2\2\u0309\u030a\5~@\2\u030a\u030c\5\u0134\u009b")
        buf.write("\2\u030b\u030d\5\u00c0a\2\u030c\u030b\3\2\2\2\u030c\u030d")
        buf.write("\3\2\2\2\u030d\u030e\3\2\2\2\u030e\u030f\5\u00c2b\2\u030f")
        buf.write("\u0310\5\u0136\u009c\2\u0310\u0311\5\u00c4c\2\u0311\u0312")
        buf.write("\7\4\2\2\u0312\u0313\7\7\2\2\u0313S\3\2\2\2\u0314\u0315")
        buf.write("\7\u0089\2\2\u0315\u0316\7\6\2\2\u0316\u0317\7\3\2\2\u0317")
        buf.write("\u0318\5\u0080A\2\u0318\u0319\5\u00c6d\2\u0319\u031a\5")
        buf.write("\u00c8e\2\u031a\u031b\5\u00caf\2\u031b\u031c\7\4\2\2\u031c")
        buf.write("\u031d\7\7\2\2\u031dU\3\2\2\2\u031e\u031f\7\u0089\2\2")
        buf.write("\u031f\u0320\7\6\2\2\u0320\u0321\7\3\2\2\u0321\u0322\5")
        buf.write("\u0082B\2\u0322\u0323\5\u00c6d\2\u0323\u0325\5\u00c8e")
        buf.write("\2\u0324\u0326\5\u0122\u0092\2\u0325\u0324\3\2\2\2\u0325")
        buf.write("\u0326\3\2\2\2\u0326\u0328\3\2\2\2\u0327\u0329\5\u0124")
        buf.write("\u0093\2\u0328\u0327\3\2\2\2\u0328\u0329\3\2\2\2\u0329")
        buf.write("\u032b\3\2\2\2\u032a\u032c\5\u00c0a\2\u032b\u032a\3\2")
        buf.write("\2\2\u032b\u032c\3\2\2\2\u032c\u032e\3\2\2\2\u032d\u032f")
        buf.write("\5\u0126\u0094\2\u032e\u032d\3\2\2\2\u032e\u032f\3\2\2")
        buf.write("\2\u032f\u0331\3\2\2\2\u0330\u0332\5\u0128\u0095\2\u0331")
        buf.write("\u0330\3\2\2\2\u0331\u0332\3\2\2\2\u0332\u0333\3\2\2\2")
        buf.write("\u0333\u0334\5\u00caf\2\u0334\u0335\5\u012a\u0096\2\u0335")
        buf.write("\u0337\5\u012c\u0097\2\u0336\u0338\5\u012e\u0098\2\u0337")
        buf.write("\u0336\3\2\2\2\u0337\u0338\3\2\2\2\u0338\u0339\3\2\2\2")
        buf.write("\u0339\u033a\7\4\2\2\u033a\u033b\7\7\2\2\u033bW\3\2\2")
        buf.write("\2\u033c\u033d\7\u0089\2\2\u033d\u033e\7\6\2\2\u033e\u033f")
        buf.write("\7\3\2\2\u033f\u0340\5\u0084C\2\u0340\u0341\5\u00c6d\2")
        buf.write("\u0341\u0342\5\u00c8e\2\u0342\u0343\5\u00caf\2\u0343\u0344")
        buf.write("\7\4\2\2\u0344\u0345\7\7\2\2\u0345Y\3\2\2\2\u0346\u0347")
        buf.write("\7\u0089\2\2\u0347\u0348\7\6\2\2\u0348\u0349\7\3\2\2\u0349")
        buf.write("\u034b\5\u0086D\2\u034a\u034c\5\u00c0a\2\u034b\u034a\3")
        buf.write("\2\2\2\u034b\u034c\3\2\2\2\u034c\u034e\3\2\2\2\u034d\u034f")
        buf.write("\5\u00b2Z\2\u034e\u034d\3\2\2\2\u034e\u034f\3\2\2\2\u034f")
        buf.write("\u0351\3\2\2\2\u0350\u0352\5\u0130\u0099\2\u0351\u0350")
        buf.write("\3\2\2\2\u0351\u0352\3\2\2\2\u0352\u0353\3\2\2\2\u0353")
        buf.write("\u0354\5\u0132\u009a\2\u0354\u0355\7\4\2\2\u0355\u0356")
        buf.write("\7\7\2\2\u0356[\3\2\2\2\u0357\u0358\7\u0089\2\2\u0358")
        buf.write("\u0359\7\6\2\2\u0359\u035a\7\3\2\2\u035a\u035b\5\u0088")
        buf.write("E\2\u035b\u035c\5\u00b4[\2\u035c\u035e\5\u00c0a\2\u035d")
        buf.write("\u035f\5\u00c2b\2\u035e\u035d\3\2\2\2\u035e\u035f\3\2")
        buf.write("\2\2\u035f\u0360\3\2\2\2\u0360\u0361\5\u00c4c\2\u0361")
        buf.write("\u0362\7\4\2\2\u0362\u0363\7\7\2\2\u0363]\3\2\2\2\u0364")
        buf.write("\u0365\7\u0089\2\2\u0365\u0366\7\6\2\2\u0366\u0367\7\3")
        buf.write("\2\2\u0367\u0369\5\u008aF\2\u0368\u036a\5\u0138\u009d")
        buf.write("\2\u0369\u0368\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u036b")
        buf.write("\3\2\2\2\u036b\u036c\5\u013a\u009e\2\u036c\u036d\5\u00c0")
        buf.write("a\2\u036d\u036e\7\4\2\2\u036e\u036f\7\7\2\2\u036f_\3\2")
        buf.write("\2\2\u0370\u0371\7\u0089\2\2\u0371\u0372\7\6\2\2\u0372")
        buf.write("\u0373\7\3\2\2\u0373\u0374\5\u008cG\2\u0374\u0375\5\u0146")
        buf.write("\u00a4\2\u0375\u0377\5\u0148\u00a5\2\u0376\u0378\5\u014a")
        buf.write("\u00a6\2\u0377\u0376\3\2\2\2\u0377\u0378\3\2\2\2\u0378")
        buf.write("\u0379\3\2\2\2\u0379\u037a\7\4\2\2\u037a\u037b\7\7\2\2")
        buf.write("\u037ba\3\2\2\2\u037c\u037d\7\u0089\2\2\u037d\u037e\7")
        buf.write("\6\2\2\u037e\u037f\7\3\2\2\u037f\u0380\5\u008eH\2\u0380")
        buf.write("\u0381\5\u00b8]\2\u0381\u0382\5\u00ba^\2\u0382\u0383\7")
        buf.write("\4\2\2\u0383\u0384\7\7\2\2\u0384c\3\2\2\2\u0385\u0386")
        buf.write("\7\u0089\2\2\u0386\u0387\7\6\2\2\u0387\u0388\7\3\2\2\u0388")
        buf.write("\u038a\5\u0090I\2\u0389\u038b\5\u00bc_\2\u038a\u0389\3")
        buf.write("\2\2\2\u038a\u038b\3\2\2\2\u038b\u038c\3\2\2\2\u038c\u038d")
        buf.write("\5\u00e2r\2\u038d\u038e\7\4\2\2\u038e\u038f\7\7\2\2\u038f")
        buf.write("e\3\2\2\2\u0390\u0391\7\u0089\2\2\u0391\u0392\7\6\2\2")
        buf.write("\u0392\u0393\7\3\2\2\u0393\u0394\5\u0092J\2\u0394\u0395")
        buf.write("\5\u00b4[\2\u0395\u0397\5\u0150\u00a9\2\u0396\u0398\5")
        buf.write("\u00c0a\2\u0397\u0396\3\2\2\2\u0397\u0398\3\2\2\2\u0398")
        buf.write("\u0399\3\2\2\2\u0399\u039a\5\u00c2b\2\u039a\u039b\5\u00c4")
        buf.write("c\2\u039b\u039c\5\u0152\u00aa\2\u039c\u039d\7\4\2\2\u039d")
        buf.write("\u039e\7\7\2\2\u039eg\3\2\2\2\u039f\u03a0\7\177\2\2\u03a0")
        buf.write("\u03a1\7\6\2\2\u03a1\u03a2\7\t\2\2\u03a2\u03a3\7\7\2\2")
        buf.write("\u03a3i\3\2\2\2\u03a4\u03a5\7\177\2\2\u03a5\u03a6\7\6")
        buf.write("\2\2\u03a6\u03a7\7\n\2\2\u03a7\u03a8\7\7\2\2\u03a8k\3")
        buf.write("\2\2\2\u03a9\u03aa\7\177\2\2\u03aa\u03ab\7\6\2\2\u03ab")
        buf.write("\u03ac\7\13\2\2\u03ac\u03ad\7\7\2\2\u03adm\3\2\2\2\u03ae")
        buf.write("\u03af\7\177\2\2\u03af\u03b0\7\6\2\2\u03b0\u03b1\7\f\2")
        buf.write("\2\u03b1\u03b2\7\7\2\2\u03b2o\3\2\2\2\u03b3\u03b4\7\177")
        buf.write("\2\2\u03b4\u03b5\7\6\2\2\u03b5\u03b6\7\r\2\2\u03b6\u03b7")
        buf.write("\7\7\2\2\u03b7q\3\2\2\2\u03b8\u03b9\7\177\2\2\u03b9\u03ba")
        buf.write("\7\6\2\2\u03ba\u03bb\7\16\2\2\u03bb\u03bc\7\7\2\2\u03bc")
        buf.write("s\3\2\2\2\u03bd\u03be\7\177\2\2\u03be\u03bf\7\6\2\2\u03bf")
        buf.write("\u03c0\7\17\2\2\u03c0\u03c1\7\7\2\2\u03c1u\3\2\2\2\u03c2")
        buf.write("\u03c3\7\177\2\2\u03c3\u03c4\7\6\2\2\u03c4\u03c5\7\20")
        buf.write("\2\2\u03c5\u03c6\7\7\2\2\u03c6w\3\2\2\2\u03c7\u03c8\7")
        buf.write("\177\2\2\u03c8\u03c9\7\6\2\2\u03c9\u03ca\7\21\2\2\u03ca")
        buf.write("\u03cb\7\7\2\2\u03cby\3\2\2\2\u03cc\u03cd\7\177\2\2\u03cd")
        buf.write("\u03ce\7\6\2\2\u03ce\u03cf\7\22\2\2\u03cf\u03d0\7\7\2")
        buf.write("\2\u03d0{\3\2\2\2\u03d1\u03d2\7\177\2\2\u03d2\u03d3\7")
        buf.write("\6\2\2\u03d3\u03d4\7\23\2\2\u03d4\u03d5\7\7\2\2\u03d5")
        buf.write("}\3\2\2\2\u03d6\u03d7\7\177\2\2\u03d7\u03d8\7\6\2\2\u03d8")
        buf.write("\u03d9\7\24\2\2\u03d9\u03da\7\7\2\2\u03da\177\3\2\2\2")
        buf.write("\u03db\u03dc\7\177\2\2\u03dc\u03dd\7\6\2\2\u03dd\u03de")
        buf.write("\7\25\2\2\u03de\u03df\7\7\2\2\u03df\u0081\3\2\2\2\u03e0")
        buf.write("\u03e1\7\177\2\2\u03e1\u03e2\7\6\2\2\u03e2\u03e3\7\26")
        buf.write("\2\2\u03e3\u03e4\7\7\2\2\u03e4\u0083\3\2\2\2\u03e5\u03e6")
        buf.write("\7\177\2\2\u03e6\u03e7\7\6\2\2\u03e7\u03e8\7\27\2\2\u03e8")
        buf.write("\u03e9\7\7\2\2\u03e9\u0085\3\2\2\2\u03ea\u03eb\7\177\2")
        buf.write("\2\u03eb\u03ec\7\6\2\2\u03ec\u03ed\7\30\2\2\u03ed\u03ee")
        buf.write("\7\7\2\2\u03ee\u0087\3\2\2\2\u03ef\u03f0\7\177\2\2\u03f0")
        buf.write("\u03f1\7\6\2\2\u03f1\u03f2\7\31\2\2\u03f2\u03f3\7\7\2")
        buf.write("\2\u03f3\u0089\3\2\2\2\u03f4\u03f5\7\177\2\2\u03f5\u03f6")
        buf.write("\7\6\2\2\u03f6\u03f7\7\32\2\2\u03f7\u03f8\7\7\2\2\u03f8")
        buf.write("\u008b\3\2\2\2\u03f9\u03fa\7\177\2\2\u03fa\u03fb\7\6\2")
        buf.write("\2\u03fb\u03fc\7\33\2\2\u03fc\u03fd\7\7\2\2\u03fd\u008d")
        buf.write("\3\2\2\2\u03fe\u03ff\7\177\2\2\u03ff\u0400\7\6\2\2\u0400")
        buf.write("\u0401\7\34\2\2\u0401\u0402\7\7\2\2\u0402\u008f\3\2\2")
        buf.write("\2\u0403\u0404\7\177\2\2\u0404\u0405\7\6\2\2\u0405\u0406")
        buf.write("\7\35\2\2\u0406\u0407\7\7\2\2\u0407\u0091\3\2\2\2\u0408")
        buf.write("\u0409\7\177\2\2\u0409\u040a\7\6\2\2\u040a\u040b\7\36")
        buf.write("\2\2\u040b\u040c\7\7\2\2\u040c\u0093\3\2\2\2\u040d\u040e")
        buf.write("\7\37\2\2\u040e\u040f\7\6\2\2\u040f\u0410\7\u0089\2\2")
        buf.write("\u0410\u0411\7\7\2\2\u0411\u0095\3\2\2\2\u0412\u0413\7")
        buf.write(" \2\2\u0413\u0414\7\6\2\2\u0414\u0415\7\u0089\2\2\u0415")
        buf.write("\u0416\7\7\2\2\u0416\u0097\3\2\2\2\u0417\u0418\7!\2\2")
        buf.write("\u0418\u0419\7\6\2\2\u0419\u041a\7\u0089\2\2\u041a\u041b")
        buf.write("\7\7\2\2\u041b\u0099\3\2\2\2\u041c\u041d\7\"\2\2\u041d")
        buf.write("\u041e\7\6\2\2\u041e\u041f\7\u0082\2\2\u041f\u0420\7\7")
        buf.write("\2\2\u0420\u009b\3\2\2\2\u0421\u0422\7#\2\2\u0422\u0423")
        buf.write("\7\6\2\2\u0423\u0424\7\u0089\2\2\u0424\u0425\7\7\2\2\u0425")
        buf.write("\u009d\3\2\2\2\u0426\u0427\7$\2\2\u0427\u0428\7\6\2\2")
        buf.write("\u0428\u0429\5\u0156\u00ac\2\u0429\u042a\7\7\2\2\u042a")
        buf.write("\u009f\3\2\2\2\u042b\u042c\7%\2\2\u042c\u042d\7\6\2\2")
        buf.write("\u042d\u042e\7\u0082\2\2\u042e\u042f\7\7\2\2\u042f\u00a1")
        buf.write("\3\2\2\2\u0430\u0431\7&\2\2\u0431\u0432\7\6\2\2\u0432")
        buf.write("\u0433\5\u0156\u00ac\2\u0433\u0434\7\7\2\2\u0434\u00a3")
        buf.write("\3\2\2\2\u0435\u0436\7\'\2\2\u0436\u0437\7\6\2\2\u0437")
        buf.write("\u0438\5\u0156\u00ac\2\u0438\u0439\7\7\2\2\u0439\u00a5")
        buf.write("\3\2\2\2\u043a\u043b\7(\2\2\u043b\u043c\7\6\2\2\u043c")
        buf.write("\u043d\5\u0156\u00ac\2\u043d\u043e\7\7\2\2\u043e\u00a7")
        buf.write("\3\2\2\2\u043f\u0440\7)\2\2\u0440\u0441\7\6\2\2\u0441")
        buf.write("\u0442\7\u0082\2\2\u0442\u0443\7\7\2\2\u0443\u00a9\3\2")
        buf.write("\2\2\u0444\u0445\7*\2\2\u0445\u0446\7\6\2\2\u0446\u0447")
        buf.write("\7\u0082\2\2\u0447\u0448\7\7\2\2\u0448\u00ab\3\2\2\2\u0449")
        buf.write("\u044a\7+\2\2\u044a\u044b\7\6\2\2\u044b\u044c\7\u0082")
        buf.write("\2\2\u044c\u044d\7\7\2\2\u044d\u00ad\3\2\2\2\u044e\u044f")
        buf.write("\7,\2\2\u044f\u0450\7\6\2\2\u0450\u0451\7\u0082\2\2\u0451")
        buf.write("\u0452\7\7\2\2\u0452\u00af\3\2\2\2\u0453\u0454\7-\2\2")
        buf.write("\u0454\u0455\7\6\2\2\u0455\u0456\7\u0082\2\2\u0456\u0457")
        buf.write("\7\7\2\2\u0457\u00b1\3\2\2\2\u0458\u0459\7.\2\2\u0459")
        buf.write("\u045a\7\6\2\2\u045a\u045b\t\2\2\2\u045b\u045c\7\7\2\2")
        buf.write("\u045c\u00b3\3\2\2\2\u045d\u045e\7/\2\2\u045e\u045f\7")
        buf.write("\6\2\2\u045f\u0460\5\u00ccg\2\u0460\u0461\7\7\2\2\u0461")
        buf.write("\u00b5\3\2\2\2\u0462\u0463\7\60\2\2\u0463\u0464\7\6\2")
        buf.write("\2\u0464\u0465\7\u008a\2\2\u0465\u0466\7\7\2\2\u0466\u00b7")
        buf.write("\3\2\2\2\u0467\u0468\7\61\2\2\u0468\u0469\7\6\2\2\u0469")
        buf.write("\u046a\7\u008a\2\2\u046a\u046b\7\7\2\2\u046b\u00b9\3\2")
        buf.write("\2\2\u046c\u046d\7\62\2\2\u046d\u046e\7\6\2\2\u046e\u0472")
        buf.write("\7\3\2\2\u046f\u0471\5\u0144\u00a3\2\u0470\u046f\3\2\2")
        buf.write("\2\u0471\u0474\3\2\2\2\u0472\u0470\3\2\2\2\u0472\u0473")
        buf.write("\3\2\2\2\u0473\u0475\3\2\2\2\u0474\u0472\3\2\2\2\u0475")
        buf.write("\u0476\7\4\2\2\u0476\u0477\7\7\2\2\u0477\u00bb\3\2\2\2")
        buf.write("\u0478\u0479\7\63\2\2\u0479\u047a\7\6\2\2\u047a\u047b")
        buf.write("\7\u0089\2\2\u047b\u047c\7\7\2\2\u047c\u00bd\3\2\2\2\u047d")
        buf.write("\u047e\7\64\2\2\u047e\u047f\7\6\2\2\u047f\u0480\5\u00cc")
        buf.write("g\2\u0480\u0481\7\7\2\2\u0481\u00bf\3\2\2\2\u0482\u0483")
        buf.write("\7\65\2\2\u0483\u0484\7\6\2\2\u0484\u0485\t\2\2\2\u0485")
        buf.write("\u0486\7\7\2\2\u0486\u00c1\3\2\2\2\u0487\u0488\7\66\2")
        buf.write("\2\u0488\u0489\7\6\2\2\u0489\u048a\t\2\2\2\u048a\u048b")
        buf.write("\7\7\2\2\u048b\u00c3\3\2\2\2\u048c\u048d\7\67\2\2\u048d")
        buf.write("\u048e\7\6\2\2\u048e\u048f\t\2\2\2\u048f\u0490\7\7\2\2")
        buf.write("\u0490\u00c5\3\2\2\2\u0491\u0492\78\2\2\u0492\u0493\7")
        buf.write("\6\2\2\u0493\u0494\7\u0082\2\2\u0494\u0495\7\7\2\2\u0495")
        buf.write("\u00c7\3\2\2\2\u0496\u0497\79\2\2\u0497\u0498\7\6\2\2")
        buf.write("\u0498\u0499\5\u00ccg\2\u0499\u049a\7\7\2\2\u049a\u00c9")
        buf.write("\3\2\2\2\u049b\u049c\7:\2\2\u049c\u049d\7\6\2\2\u049d")
        buf.write("\u049e\7\u0082\2\2\u049e\u049f\7\7\2\2\u049f\u00cb\3\2")
        buf.write("\2\2\u04a0\u04a5\7;\2\2\u04a1\u04a2\7\u0089\2\2\u04a2")
        buf.write("\u04a4\7<\2\2\u04a3\u04a1\3\2\2\2\u04a4\u04a7\3\2\2\2")
        buf.write("\u04a5\u04a3\3\2\2\2\u04a5\u04a6\3\2\2\2\u04a6\u04a8\3")
        buf.write("\2\2\2\u04a7\u04a5\3\2\2\2\u04a8\u04a9\7=\2\2\u04a9\u00cd")
        buf.write("\3\2\2\2\u04aa\u04b0\7;\2\2\u04ab\u04ac\5\u0156\u00ac")
        buf.write("\2\u04ac\u04ad\7<\2\2\u04ad\u04af\3\2\2\2\u04ae\u04ab")
        buf.write("\3\2\2\2\u04af\u04b2\3\2\2\2\u04b0\u04ae\3\2\2\2\u04b0")
        buf.write("\u04b1\3\2\2\2\u04b1\u04b3\3\2\2\2\u04b2\u04b0\3\2\2\2")
        buf.write("\u04b3\u04b4\7=\2\2\u04b4\u00cf\3\2\2\2\u04b5\u04ba\7")
        buf.write(";\2\2\u04b6\u04b7\7\u008b\2\2\u04b7\u04b9\7<\2\2\u04b8")
        buf.write("\u04b6\3\2\2\2\u04b9\u04bc\3\2\2\2\u04ba\u04b8\3\2\2\2")
        buf.write("\u04ba\u04bb\3\2\2\2\u04bb\u04bd\3\2\2\2\u04bc\u04ba\3")
        buf.write("\2\2\2\u04bd\u04be\7=\2\2\u04be\u00d1\3\2\2\2\u04bf\u04c0")
        buf.write("\7>\2\2\u04c0\u04c1\7\6\2\2\u04c1\u04c2\7\u0089\2\2\u04c2")
        buf.write("\u04c3\7\7\2\2\u04c3\u00d3\3\2\2\2\u04c4\u04c5\7?\2\2")
        buf.write("\u04c5\u04c6\7\6\2\2\u04c6\u04c7\5\u00ccg\2\u04c7\u04c8")
        buf.write("\7\7\2\2\u04c8\u00d5\3\2\2\2\u04c9\u04ca\7@\2\2\u04ca")
        buf.write("\u04cb\7\6\2\2\u04cb\u04cc\5\u00ccg\2\u04cc\u04cd\7\7")
        buf.write("\2\2\u04cd\u00d7\3\2\2\2\u04ce\u04cf\7A\2\2\u04cf\u04d0")
        buf.write("\7\6\2\2\u04d0\u04d1\t\2\2\2\u04d1\u04d2\7\7\2\2\u04d2")
        buf.write("\u00d9\3\2\2\2\u04d3\u04d4\7B\2\2\u04d4\u04d5\7\6\2\2")
        buf.write("\u04d5\u04d6\t\2\2\2\u04d6\u04d7\7\7\2\2\u04d7\u00db\3")
        buf.write("\2\2\2\u04d8\u04d9\7C\2\2\u04d9\u04da\7\6\2\2\u04da\u04db")
        buf.write("\t\2\2\2\u04db\u04dc\7\7\2\2\u04dc\u00dd\3\2\2\2\u04dd")
        buf.write("\u04de\7D\2\2\u04de\u04df\7\6\2\2\u04df\u04e0\7\u0082")
        buf.write("\2\2\u04e0\u04e1\7\7\2\2\u04e1\u00df\3\2\2\2\u04e2\u04e3")
        buf.write("\7E\2\2\u04e3\u04e4\7\6\2\2\u04e4\u04e5\5\u00ccg\2\u04e5")
        buf.write("\u04e6\7\7\2\2\u04e6\u00e1\3\2\2\2\u04e7\u04e8\7F\2\2")
        buf.write("\u04e8\u04e9\7\6\2\2\u04e9\u04ea\5\u0156\u00ac\2\u04ea")
        buf.write("\u04eb\7\7\2\2\u04eb\u00e3\3\2\2\2\u04ec\u04ed\7G\2\2")
        buf.write("\u04ed\u04ee\7\6\2\2\u04ee\u04ef\7\u0089\2\2\u04ef\u04f0")
        buf.write("\7\7\2\2\u04f0\u00e5\3\2\2\2\u04f1\u04f2\7H\2\2\u04f2")
        buf.write("\u04f3\7\6\2\2\u04f3\u04f4\7\u008a\2\2\u04f4\u04f5\7\7")
        buf.write("\2\2\u04f5\u00e7\3\2\2\2\u04f6\u04f7\7I\2\2\u04f7\u04f8")
        buf.write("\7\6\2\2\u04f8\u04f9\7\u0082\2\2\u04f9\u04fa\7\7\2\2\u04fa")
        buf.write("\u00e9\3\2\2\2\u04fb\u04fc\7J\2\2\u04fc\u04fd\7\6\2\2")
        buf.write("\u04fd\u04fe\5\u0156\u00ac\2\u04fe\u04ff\7\7\2\2\u04ff")
        buf.write("\u00eb\3\2\2\2\u0500\u0501\7K\2\2\u0501\u0502\7\6\2\2")
        buf.write("\u0502\u0503\5\u0156\u00ac\2\u0503\u0504\7\7\2\2\u0504")
        buf.write("\u00ed\3\2\2\2\u0505\u0506\7L\2\2\u0506\u0507\7\6\2\2")
        buf.write("\u0507\u0509\7\3\2\2\u0508\u050a\5\u00f6|\2\u0509\u0508")
        buf.write("\3\2\2\2\u0509\u050a\3\2\2\2\u050a\u050c\3\2\2\2\u050b")
        buf.write("\u050d\5\u0154\u00ab\2\u050c\u050b\3\2\2\2\u050c\u050d")
        buf.write("\3\2\2\2\u050d\u050f\3\2\2\2\u050e\u0510\5\u00f2z\2\u050f")
        buf.write("\u050e\3\2\2\2\u050f\u0510\3\2\2\2\u0510\u0512\3\2\2\2")
        buf.write("\u0511\u0513\5\u00f0y\2\u0512\u0511\3\2\2\2\u0512\u0513")
        buf.write("\3\2\2\2\u0513\u0515\3\2\2\2\u0514\u0516\5\u00f4{\2\u0515")
        buf.write("\u0514\3\2\2\2\u0515\u0516\3\2\2\2\u0516\u0518\3\2\2\2")
        buf.write("\u0517\u0519\5\u00f8}\2\u0518\u0517\3\2\2\2\u0518\u0519")
        buf.write("\3\2\2\2\u0519\u051b\3\2\2\2\u051a\u051c\5\u00fa~\2\u051b")
        buf.write("\u051a\3\2\2\2\u051b\u051c\3\2\2\2\u051c\u051e\3\2\2\2")
        buf.write("\u051d\u051f\5\u00fc\177\2\u051e\u051d\3\2\2\2\u051e\u051f")
        buf.write("\3\2\2\2\u051f\u0521\3\2\2\2\u0520\u0522\5\u00fe\u0080")
        buf.write("\2\u0521\u0520\3\2\2\2\u0521\u0522\3\2\2\2\u0522\u0523")
        buf.write("\3\2\2\2\u0523\u0524\7\4\2\2\u0524\u0525\7\7\2\2\u0525")
        buf.write("\u00ef\3\2\2\2\u0526\u0527\7M\2\2\u0527\u0528\7\6\2\2")
        buf.write("\u0528\u0529\7\u0082\2\2\u0529\u052a\7\7\2\2\u052a\u00f1")
        buf.write("\3\2\2\2\u052b\u052c\7N\2\2\u052c\u052d\7\6\2\2\u052d")
        buf.write("\u052e\7\u008b\2\2\u052e\u052f\7\7\2\2\u052f\u00f3\3\2")
        buf.write("\2\2\u0530\u0531\7O\2\2\u0531\u0532\7\6\2\2\u0532\u0533")
        buf.write("\7\u0082\2\2\u0533\u0534\7\7\2\2\u0534\u00f5\3\2\2\2\u0535")
        buf.write("\u0536\7P\2\2\u0536\u0537\7\6\2\2\u0537\u0538\7\u008b")
        buf.write("\2\2\u0538\u0539\7\7\2\2\u0539\u00f7\3\2\2\2\u053a\u053b")
        buf.write("\7Q\2\2\u053b\u053c\7\6\2\2\u053c\u053d\7\u0082\2\2\u053d")
        buf.write("\u053e\7\7\2\2\u053e\u00f9\3\2\2\2\u053f\u0540\7R\2\2")
        buf.write("\u0540\u0541\7\6\2\2\u0541\u0542\7\u0082\2\2\u0542\u0543")
        buf.write("\7\7\2\2\u0543\u00fb\3\2\2\2\u0544\u0545\7S\2\2\u0545")
        buf.write("\u0546\7\6\2\2\u0546\u0547\5\u0156\u00ac\2\u0547\u0548")
        buf.write("\7\7\2\2\u0548\u00fd\3\2\2\2\u0549\u054a\7T\2\2\u054a")
        buf.write("\u054b\7\6\2\2\u054b\u054f\7\3\2\2\u054c\u054e\5\u0100")
        buf.write("\u0081\2\u054d\u054c\3\2\2\2\u054e\u0551\3\2\2\2\u054f")
        buf.write("\u054d\3\2\2\2\u054f\u0550\3\2\2\2\u0550\u0552\3\2\2\2")
        buf.write("\u0551\u054f\3\2\2\2\u0552\u0553\7\4\2\2\u0553\u0554\7")
        buf.write("\7\2\2\u0554\u00ff\3\2\2\2\u0555\u0556\7\u0089\2\2\u0556")
        buf.write("\u0557\7\6\2\2\u0557\u0559\7\3\2\2\u0558\u055a\5\u0102")
        buf.write("\u0082\2\u0559\u0558\3\2\2\2\u0559\u055a\3\2\2\2\u055a")
        buf.write("\u055c\3\2\2\2\u055b\u055d\5\u0104\u0083\2\u055c\u055b")
        buf.write("\3\2\2\2\u055c\u055d\3\2\2\2\u055d\u055f\3\2\2\2\u055e")
        buf.write("\u0560\5\u0106\u0084\2\u055f\u055e\3\2\2\2\u055f\u0560")
        buf.write("\3\2\2\2\u0560\u0562\3\2\2\2\u0561\u0563\5\u0108\u0085")
        buf.write("\2\u0562\u0561\3\2\2\2\u0562\u0563\3\2\2\2\u0563\u0565")
        buf.write("\3\2\2\2\u0564\u0566\5\u00f0y\2\u0565\u0564\3\2\2\2\u0565")
        buf.write("\u0566\3\2\2\2\u0566\u0568\3\2\2\2\u0567\u0569\5\u010a")
        buf.write("\u0086\2\u0568\u0567\3\2\2\2\u0568\u0569\3\2\2\2\u0569")
        buf.write("\u056b\3\2\2\2\u056a\u056c\5\u014e\u00a8\2\u056b\u056a")
        buf.write("\3\2\2\2\u056b\u056c\3\2\2\2\u056c\u056e\3\2\2\2\u056d")
        buf.write("\u056f\5\u0104\u0083\2\u056e\u056d\3\2\2\2\u056e\u056f")
        buf.write("\3\2\2\2\u056f\u0570\3\2\2\2\u0570\u0571\7\4\2\2\u0571")
        buf.write("\u0572\7\7\2\2\u0572\u0101\3\2\2\2\u0573\u0574\7U\2\2")
        buf.write("\u0574\u0575\7\6\2\2\u0575\u0576\7\u008b\2\2\u0576\u0577")
        buf.write("\7\7\2\2\u0577\u0103\3\2\2\2\u0578\u0579\7V\2\2\u0579")
        buf.write("\u057a\7\6\2\2\u057a\u057b\7\u0089\2\2\u057b\u057c\7\7")
        buf.write("\2\2\u057c\u0105\3\2\2\2\u057d\u057e\7W\2\2\u057e\u057f")
        buf.write("\7\6\2\2\u057f\u0580\t\2\2\2\u0580\u0581\7\7\2\2\u0581")
        buf.write("\u0107\3\2\2\2\u0582\u0583\7X\2\2\u0583\u0584\7\6\2\2")
        buf.write("\u0584\u0585\t\2\2\2\u0585\u0586\7\7\2\2\u0586\u0109\3")
        buf.write("\2\2\2\u0587\u0588\7Y\2\2\u0588\u0589\7\6\2\2\u0589\u058a")
        buf.write("\7\u008b\2\2\u058a\u058b\7\7\2\2\u058b\u010b\3\2\2\2\u058c")
        buf.write("\u058d\7Z\2\2\u058d\u058e\7\6\2\2\u058e\u058f\7\u008a")
        buf.write("\2\2\u058f\u0590\7\7\2\2\u0590\u010d\3\2\2\2\u0591\u0592")
        buf.write("\7[\2\2\u0592\u0593\7\6\2\2\u0593\u0594\7\u008b\2\2\u0594")
        buf.write("\u0595\7\7\2\2\u0595\u010f\3\2\2\2\u0596\u0597\7\\\2\2")
        buf.write("\u0597\u0598\7\6\2\2\u0598\u0599\7\u0082\2\2\u0599\u059a")
        buf.write("\7\7\2\2\u059a\u0111\3\2\2\2\u059b\u059c\7]\2\2\u059c")
        buf.write("\u059d\7\6\2\2\u059d\u059e\5\u00ceh\2\u059e\u059f\7\7")
        buf.write("\2\2\u059f\u0113\3\2\2\2\u05a0\u05a1\7^\2\2\u05a1\u05a2")
        buf.write("\7\6\2\2\u05a2\u05a3\7\u0089\2\2\u05a3\u05a4\7\7\2\2\u05a4")
        buf.write("\u0115\3\2\2\2\u05a5\u05a6\7_\2\2\u05a6\u05a7\7\6\2\2")
        buf.write("\u05a7\u05a8\7\u0089\2\2\u05a8\u05a9\7\7\2\2\u05a9\u0117")
        buf.write("\3\2\2\2\u05aa\u05ab\7`\2\2\u05ab\u05ac\7\6\2\2\u05ac")
        buf.write("\u05ad\5\u00ccg\2\u05ad\u05ae\7\7\2\2\u05ae\u0119\3\2")
        buf.write("\2\2\u05af\u05b0\7a\2\2\u05b0\u05b1\7\6\2\2\u05b1\u05b2")
        buf.write("\t\2\2\2\u05b2\u05b3\7\7\2\2\u05b3\u011b\3\2\2\2\u05b4")
        buf.write("\u05b5\7b\2\2\u05b5\u05b6\7\6\2\2\u05b6\u05b7\5\u0156")
        buf.write("\u00ac\2\u05b7\u05b8\7\7\2\2\u05b8\u05c1\3\2\2\2\u05b9")
        buf.write("\u05ba\7b\2\2\u05ba\u05bb\7\6\2\2\u05bb\u05bc\7;\2\2\u05bc")
        buf.write("\u05bd\5\u0140\u00a1\2\u05bd\u05be\7=\2\2\u05be\u05bf")
        buf.write("\7\7\2\2\u05bf\u05c1\3\2\2\2\u05c0\u05b4\3\2\2\2\u05c0")
        buf.write("\u05b9\3\2\2\2\u05c1\u011d\3\2\2\2\u05c2\u05c3\7c\2\2")
        buf.write("\u05c3\u05c4\7\6\2\2\u05c4\u05c5\t\2\2\2\u05c5\u05c6\7")
        buf.write("\7\2\2\u05c6\u011f\3\2\2\2\u05c7\u05c8\7d\2\2\u05c8\u05c9")
        buf.write("\7\6\2\2\u05c9\u05ca\5\u00ccg\2\u05ca\u05cb\7\7\2\2\u05cb")
        buf.write("\u0121\3\2\2\2\u05cc\u05cd\7e\2\2\u05cd\u05ce\7\6\2\2")
        buf.write("\u05ce\u05cf\5\u00ceh\2\u05cf\u05d0\7\7\2\2\u05d0\u0123")
        buf.write("\3\2\2\2\u05d1\u05d2\7f\2\2\u05d2\u05d3\7\6\2\2\u05d3")
        buf.write("\u05d4\5\u00ceh\2\u05d4\u05d5\7\7\2\2\u05d5\u0125\3\2")
        buf.write("\2\2\u05d6\u05d7\7g\2\2\u05d7\u05d8\7\6\2\2\u05d8\u05d9")
        buf.write("\5\u00ceh\2\u05d9\u05da\7\7\2\2\u05da\u0127\3\2\2\2\u05db")
        buf.write("\u05dc\7h\2\2\u05dc\u05dd\7\6\2\2\u05dd\u05de\5\u00ce")
        buf.write("h\2\u05de\u05df\7\7\2\2\u05df\u0129\3\2\2\2\u05e0\u05e1")
        buf.write("\7i\2\2\u05e1\u05e2\7\6\2\2\u05e2\u05e3\7\u008b\2\2\u05e3")
        buf.write("\u05e4\7\7\2\2\u05e4\u012b\3\2\2\2\u05e5\u05e6\7j\2\2")
        buf.write("\u05e6\u05e7\7\6\2\2\u05e7\u05e8\t\2\2\2\u05e8\u05e9\7")
        buf.write("\7\2\2\u05e9\u012d\3\2\2\2\u05ea\u05eb\7k\2\2\u05eb\u05ec")
        buf.write("\7\6\2\2\u05ec\u05ed\7\u0082\2\2\u05ed\u05ee\7\7\2\2\u05ee")
        buf.write("\u012f\3\2\2\2\u05ef\u05f0\7l\2\2\u05f0\u05f1\7\6\2\2")
        buf.write("\u05f1\u05f2\7\u0089\2\2\u05f2\u05f3\7\7\2\2\u05f3\u0131")
        buf.write("\3\2\2\2\u05f4\u05f5\7m\2\2\u05f5\u05f6\7\6\2\2\u05f6")
        buf.write("\u05f7\7\u0089\2\2\u05f7\u05f8\7\7\2\2\u05f8\u0133\3\2")
        buf.write("\2\2\u05f9\u05fa\7n\2\2\u05fa\u05fb\7\6\2\2\u05fb\u05fc")
        buf.write("\5\u0156\u00ac\2\u05fc\u05fd\7\7\2\2\u05fd\u0135\3\2\2")
        buf.write("\2\u05fe\u05ff\7o\2\2\u05ff\u0600\7\6\2\2\u0600\u0601")
        buf.write("\7\u0089\2\2\u0601\u0602\7\7\2\2\u0602\u0137\3\2\2\2\u0603")
        buf.write("\u0604\7p\2\2\u0604\u0605\7\6\2\2\u0605\u0606\7\u0089")
        buf.write("\2\2\u0606\u0607\7\7\2\2\u0607\u0139\3\2\2\2\u0608\u0609")
        buf.write("\7q\2\2\u0609\u060a\7\6\2\2\u060a\u060e\7\3\2\2\u060b")
        buf.write("\u060d\5\u0144\u00a3\2\u060c\u060b\3\2\2\2\u060d\u0610")
        buf.write("\3\2\2\2\u060e\u060c\3\2\2\2\u060e\u060f\3\2\2\2\u060f")
        buf.write("\u0611\3\2\2\2\u0610\u060e\3\2\2\2\u0611\u0612\7\4\2\2")
        buf.write("\u0612\u0613\7\7\2\2\u0613\u013b\3\2\2\2\u0614\u0615\7")
        buf.write("r\2\2\u0615\u0616\7\6\2\2\u0616\u0617\t\2\2\2\u0617\u0618")
        buf.write("\7\7\2\2\u0618\u013d\3\2\2\2\u0619\u061a\7s\2\2\u061a")
        buf.write("\u061b\7\6\2\2\u061b\u061c\7\u0082\2\2\u061c\u061d\7\7")
        buf.write("\2\2\u061d\u013f\3\2\2\2\u061e\u0620\5\u0142\u00a2\2\u061f")
        buf.write("\u061e\3\2\2\2\u0620\u0623\3\2\2\2\u0621\u061f\3\2\2\2")
        buf.write("\u0621\u0622\3\2\2\2\u0622\u0141\3\2\2\2\u0623\u0621\3")
        buf.write("\2\2\2\u0624\u0625\7\3\2\2\u0625\u0626\7t\2\2\u0626\u0627")
        buf.write("\7\6\2\2\u0627\u0628\7\u0089\2\2\u0628\u0629\7\7\2\2\u0629")
        buf.write("\u062a\7u\2\2\u062a\u062b\7\6\2\2\u062b\u062c\7\u0089")
        buf.write("\2\2\u062c\u062d\7\7\2\2\u062d\u062e\7\4\2\2\u062e\u062f")
        buf.write("\7<\2\2\u062f\u0143\3\2\2\2\u0630\u0631\5\u0156\u00ac")
        buf.write("\2\u0631\u0632\7\6\2\2\u0632\u0633\5\u0156\u00ac\2\u0633")
        buf.write("\u0634\7\7\2\2\u0634\u0655\3\2\2\2\u0635\u0636\5\u0156")
        buf.write("\u00ac\2\u0636\u0637\7\6\2\2\u0637\u0638\7\u0082\2\2\u0638")
        buf.write("\u0639\7\7\2\2\u0639\u0655\3\2\2\2\u063a\u063b\5\u0156")
        buf.write("\u00ac\2\u063b\u063c\7\6\2\2\u063c\u063d\7\u0084\2\2\u063d")
        buf.write("\u063e\7\7\2\2\u063e\u0655\3\2\2\2\u063f\u0640\5\u0156")
        buf.write("\u00ac\2\u0640\u0641\7\6\2\2\u0641\u0642\7\3\2\2\u0642")
        buf.write("\u0643\5\u0144\u00a3\2\u0643\u0644\7\4\2\2\u0644\u0645")
        buf.write("\7\7\2\2\u0645\u0655\3\2\2\2\u0646\u0647\5\u0156\u00ac")
        buf.write("\2\u0647\u0648\7\6\2\2\u0648\u064e\7;\2\2\u0649\u064a")
        buf.write("\5\u0156\u00ac\2\u064a\u064b\7<\2\2\u064b\u064d\3\2\2")
        buf.write("\2\u064c\u0649\3\2\2\2\u064d\u0650\3\2\2\2\u064e\u064c")
        buf.write("\3\2\2\2\u064e\u064f\3\2\2\2\u064f\u0651\3\2\2\2\u0650")
        buf.write("\u064e\3\2\2\2\u0651\u0652\7=\2\2\u0652\u0653\7\7\2\2")
        buf.write("\u0653\u0655\3\2\2\2\u0654\u0630\3\2\2\2\u0654\u0635\3")
        buf.write("\2\2\2\u0654\u063a\3\2\2\2\u0654\u063f\3\2\2\2\u0654\u0646")
        buf.write("\3\2\2\2\u0655\u0145\3\2\2\2\u0656\u0657\7v\2\2\u0657")
        buf.write("\u0658\7\6\2\2\u0658\u0659\5\u00ccg\2\u0659\u065a\7\7")
        buf.write("\2\2\u065a\u0147\3\2\2\2\u065b\u065c\7w\2\2\u065c\u065d")
        buf.write("\7\6\2\2\u065d\u065e\7\u0082\2\2\u065e\u065f\7\7\2\2\u065f")
        buf.write("\u0149\3\2\2\2\u0660\u0661\7x\2\2\u0661\u0662\7\6\2\2")
        buf.write("\u0662\u0663\t\2\2\2\u0663\u0664\7\7\2\2\u0664\u014b\3")
        buf.write("\2\2\2\u0665\u0666\7y\2\2\u0666\u0667\7\6\2\2\u0667\u066b")
        buf.write("\7\3\2\2\u0668\u066a\5\u0144\u00a3\2\u0669\u0668\3\2\2")
        buf.write("\2\u066a\u066d\3\2\2\2\u066b\u0669\3\2\2\2\u066b\u066c")
        buf.write("\3\2\2\2\u066c\u066e\3\2\2\2\u066d\u066b\3\2\2\2\u066e")
        buf.write("\u066f\7\4\2\2\u066f\u0670\7\7\2\2\u0670\u014d\3\2\2\2")
        buf.write("\u0671\u0672\7z\2\2\u0672\u0673\7\6\2\2\u0673\u0677\7")
        buf.write("\3\2\2\u0674\u0676\5\u0144\u00a3\2\u0675\u0674\3\2\2\2")
        buf.write("\u0676\u0679\3\2\2\2\u0677\u0675\3\2\2\2\u0677\u0678\3")
        buf.write("\2\2\2\u0678\u067a\3\2\2\2\u0679\u0677\3\2\2\2\u067a\u067b")
        buf.write("\7\4\2\2\u067b\u067c\7\7\2\2\u067c\u014f\3\2\2\2\u067d")
        buf.write("\u067e\7{\2\2\u067e\u067f\7\6\2\2\u067f\u0680\7\u0089")
        buf.write("\2\2\u0680\u0681\7\7\2\2\u0681\u0151\3\2\2\2\u0682\u0683")
        buf.write("\7|\2\2\u0683\u0684\7\6\2\2\u0684\u0685\7\u008b\2\2\u0685")
        buf.write("\u0686\7\7\2\2\u0686\u0153\3\2\2\2\u0687\u0688\7}\2\2")
        buf.write("\u0688\u0689\7\6\2\2\u0689\u068a\5\u0156\u00ac\2\u068a")
        buf.write("\u068b\7\7\2\2\u068b\u0155\3\2\2\2\u068c\u068d\t\3\2\2")
        buf.write("\u068d\u0157\3\2\2\2x\u0176\u0179\u017c\u017f\u0183\u0187")
        buf.write("\u018a\u018d\u0191\u0194\u0197\u019a\u019d\u01a0\u01a5")
        buf.write("\u01a8\u01ab\u01b8\u01bd\u01c2\u01c7\u01cc\u01d1\u01d6")
        buf.write("\u01db\u01e0\u01e5\u01ea\u01ef\u01f4\u01f9\u01fe\u0203")
        buf.write("\u0208\u020d\u0212\u0217\u021c\u0221\u022c\u0236\u0239")
        buf.write("\u023c\u023f\u0258\u0263\u0266\u0269\u026c\u026f\u0272")
        buf.write("\u0275\u0278\u027b\u027e\u0281\u0284\u0287\u028a\u029f")
        buf.write("\u02a2\u02a5\u02a8\u02ac\u02af\u02b2\u02cb\u02ce\u02eb")
        buf.write("\u02f0\u02f4\u02f8\u02fb\u02ff\u030c\u0325\u0328\u032b")
        buf.write("\u032e\u0331\u0337\u034b\u034e\u0351\u035e\u0369\u0377")
        buf.write("\u038a\u0397\u0472\u04a5\u04b0\u04ba\u0509\u050c\u050f")
        buf.write("\u0512\u0515\u0518\u051b\u051e\u0521\u054f\u0559\u055c")
        buf.write("\u055f\u0562\u0565\u0568\u056b\u056e\u05c0\u060e\u0621")
        buf.write("\u064e\u0654\u066b\u0677")
        return buf.getvalue()


class PBXProjParser ( Parser ):

    grammarFileName = "PBXProj.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'{'", "'}'", "'archiveVersion'", "'='", 
                     "';'", "'objectVersion'", "'PBXAggregateTarget'", "'PBXBuildFile'", 
                     "'PBXContainerItemProxy'", "'PBXCopyFilesBuildPhase'", 
                     "'PBXFileReference'", "'PBXFrameworksBuildPhase'", 
                     "'PBXGroup'", "'PBXHeadersBuildPhase'", "'PBXNativeTarget'", 
                     "'PBXLegacyTarget'", "'PBXProject'", "'PBXReferenceProxy'", 
                     "'PBXResourcesBuildPhase'", "'PBXShellScriptBuildPhase'", 
                     "'PBXSourcesBuildPhase'", "'PBXTargetDependency'", 
                     "'PBXVariantGroup'", "'XCBuildConfiguration'", "'XCConfigurationList'", 
                     "'XCRemoteSwiftPackageReference'", "'XCSwiftPackageProductDependency'", 
                     "'XCVersionGroup'", "'fileRef'", "'productRef'", "'containerPortal'", 
                     "'proxyType'", "'remoteGlobalIDString'", "'remoteInfo'", 
                     "'fileEncoding'", "'comments'", "'explicitFileType'", 
                     "'lastKnownFileType'", "'includeInIndex'", "'indentWidth'", 
                     "'tabWidth'", "'usesTabs'", "'wrapsLines'", "'platformFilter'", 
                     "'children'", "'productInstallPath'", "'repositoryURL'", 
                     "'requirement'", "'package'", "'packageProductDependencies'", 
                     "'name'", "'path'", "'sourceTree'", "'buildActionMask'", 
                     "'files'", "'runOnlyForDeploymentPostprocessing'", 
                     "'('", "','", "')'", "'buildConfigurationList'", "'buildPhases'", 
                     "'buildRules'", "'buildArgumentsString'", "'buildToolPath'", 
                     "'buildWorkingDirectory'", "'passBuildSettingsInEnvironment'", 
                     "'dependencies'", "'productName'", "'productReference'", 
                     "'productType'", "'lineEnding'", "'xcLanguageSpecificationIdentifier'", 
                     "'plistStructureDefinitionIdentifier'", "'attributes'", 
                     "'LastSwiftMigration'", "'DefaultBuildSystemTypeForWorkspace'", 
                     "'LastSwiftUpdateCheck'", "'BuildIndependentTargetsInParallel'", 
                     "'LastTestingUpgradeCheck'", "'LastUpgradeCheck'", 
                     "'ORGANIZATIONNAME'", "'TargetAttributes'", "'CreatedOnToolsVersion'", 
                     "'TestTargetID'", "'DevelopmentTeam'", "'DevelopmentTeamName'", 
                     "'ProvisioningStyle'", "'compatibilityVersion'", "'developmentRegion'", 
                     "'hasScannedForEncodings'", "'knownRegions'", "'mainGroup'", 
                     "'productRefGroup'", "'packageReferences'", "'projectDirPath'", 
                     "'projectReferences'", "'projectRoot'", "'targets'", 
                     "'inputFileListPaths'", "'inputPaths'", "'outputFileListPaths'", 
                     "'outputPaths'", "'shellPath'", "'shellScript'", "'showEnvVarsInLog'", 
                     "'target'", "'targetProxy'", "'fileType'", "'remoteRef'", 
                     "'baseConfigurationReference'", "'buildSettings'", 
                     "'dstPath'", "'dstSubfolderSpec'", "'ProductGroup'", 
                     "'ProjectRef'", "'buildConfigurations'", "'defaultConfigurationIsVisible'", 
                     "'defaultConfigurationName'", "'settings'", "'SystemCapabilities'", 
                     "'currentVersion'", "'versionGroupType'", "'CLASSPREFIX'", 
                     "'classes'", "'isa'", "'objects'", "'rootObject'", 
                     "<INVALID>", "'.'", "<INVALID>", "<INVALID>", "'-'", 
                     "'_'", "'/'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "CLASSES", "ISA", "OBJECTS", "ROOT_OBJECT", "NUMBER", 
                      "DOT", "ALPHA_NUMERIC", "ALPHA_NUMERIC_CAP", "DASH", 
                      "UNDERSCORE", "SLASH", "REFERENCE", "QUOTED_STRING", 
                      "NON_QUOTED_STRING", "VARIABLE", "WS", "COMMENT", 
                      "LINE_COMMENT" ]

    RULE_start = 0
    RULE_root_element = 1
    RULE_archive_version = 2
    RULE_classes = 3
    RULE_object_version = 4
    RULE_objects = 5
    RULE_root_object = 6
    RULE_pbx_aggregate_target_section = 7
    RULE_pbx_build_file_section = 8
    RULE_pbx_container_item_proxy_section = 9
    RULE_pbx_copy_files_build_phase_section = 10
    RULE_pbx_file_reference_section = 11
    RULE_pbx_frameworks_build_phase_section = 12
    RULE_pbx_group_section = 13
    RULE_pbx_headers_build_phase_section = 14
    RULE_pbx_native_target_section = 15
    RULE_pbx_legacy_target_section = 16
    RULE_pbx_project_section = 17
    RULE_pbx_reference_proxy_section = 18
    RULE_pbx_resources_build_phase_section = 19
    RULE_pbx_shell_script_build_phase_section = 20
    RULE_pbx_sources_build_phase_section = 21
    RULE_pbx_target_dependency_section = 22
    RULE_pbx_variant_group_section = 23
    RULE_xc_build_configuration_section = 24
    RULE_xc_configuration_list_section = 25
    RULE_xc_remote_swift_package_reference_section = 26
    RULE_xc_swift_package_product_dependency_section = 27
    RULE_xc_version_group_section = 28
    RULE_pbx_aggregate_target = 29
    RULE_pbx_build_file = 30
    RULE_pbx_container_item_proxy = 31
    RULE_pbx_copy_files_build_phase = 32
    RULE_pbx_file_reference = 33
    RULE_pbx_frameworks_build_phase = 34
    RULE_pbx_group = 35
    RULE_pbx_headers_build_phase = 36
    RULE_pbx_native_target = 37
    RULE_pbx_legacy_target = 38
    RULE_pbx_project = 39
    RULE_pbx_reference_proxy = 40
    RULE_pbx_resources_build_phase = 41
    RULE_pbx_shell_script_build_phase = 42
    RULE_pbx_sources_build_phase = 43
    RULE_pbx_target_dependency = 44
    RULE_pbx_variant_group = 45
    RULE_xc_build_configuration = 46
    RULE_xc_configuration_list = 47
    RULE_xc_remote_swift_package_reference = 48
    RULE_xc_swift_package_product_dependency = 49
    RULE_xc_version_group = 50
    RULE_isa_pbx_aggregate_target = 51
    RULE_isa_pbx_build_file = 52
    RULE_isa_pbx_container_item_proxy = 53
    RULE_isa_pbx_copy_files_build_phase = 54
    RULE_isa_pbx_file_reference = 55
    RULE_isa_pbx_frameworks_build_phase = 56
    RULE_isa_pbx_group = 57
    RULE_isa_pbx_header_build_phase = 58
    RULE_isa_pbx_native_target = 59
    RULE_isa_pbx_legacy_target = 60
    RULE_isa_pbx_project = 61
    RULE_isa_pbx_reference_proxy = 62
    RULE_isa_pbx_resources_build_phase = 63
    RULE_isa_pbx_shell_script_build_phase = 64
    RULE_isa_pbx_sources_build_phase = 65
    RULE_isa_pbx_target_dependency = 66
    RULE_isa_pbx_variant_group = 67
    RULE_isa_xc_build_configuration = 68
    RULE_isa_xc_configuration_list = 69
    RULE_isa_xc_remote_swift_package_reference = 70
    RULE_isa_xc_swift_package_product_dependency = 71
    RULE_isa_xc_version_group = 72
    RULE_file_ref = 73
    RULE_product_ref = 74
    RULE_container_portal = 75
    RULE_proxy_type = 76
    RULE_remote_global_id_string = 77
    RULE_remote_info = 78
    RULE_file_encoding = 79
    RULE_comments = 80
    RULE_explicit_file_type = 81
    RULE_last_known_file_type = 82
    RULE_include_in_index = 83
    RULE_indent_width = 84
    RULE_tab_width = 85
    RULE_uses_tabs = 86
    RULE_wraps_lines = 87
    RULE_platform_filter = 88
    RULE_children = 89
    RULE_product_install_path = 90
    RULE_repository_url = 91
    RULE_requirement = 92
    RULE_xc_package = 93
    RULE_package_product_dependencies = 94
    RULE_name = 95
    RULE_path = 96
    RULE_source_tree = 97
    RULE_build_action_mask = 98
    RULE_files = 99
    RULE_run_only_for_deployment_postprocessing = 100
    RULE_reference_list = 101
    RULE_any_string_list = 102
    RULE_non_quoted_strings_list = 103
    RULE_build_configuration_list = 104
    RULE_build_phases = 105
    RULE_build_rules = 106
    RULE_build_arguments_string = 107
    RULE_build_tool_path = 108
    RULE_build_working_directory = 109
    RULE_pass_build_settings_in_environment = 110
    RULE_dependencies = 111
    RULE_product_name = 112
    RULE_product_reference = 113
    RULE_product_type = 114
    RULE_line_ending = 115
    RULE_xc_language_specification_identifier = 116
    RULE_plist_structure_definition_identifier = 117
    RULE_attributes = 118
    RULE_last_swift_migration = 119
    RULE_default_build_system_type_for_workspace = 120
    RULE_last_swift_update_check = 121
    RULE_build_targets_in_parallel = 122
    RULE_last_testing_upgrade_check = 123
    RULE_last_upgrade_check = 124
    RULE_organization_name = 125
    RULE_target_attributes = 126
    RULE_target_attribute = 127
    RULE_created_on_tools_version = 128
    RULE_test_target_id = 129
    RULE_development_team = 130
    RULE_development_team_name = 131
    RULE_provisioning_style = 132
    RULE_compatibility_version = 133
    RULE_development_region = 134
    RULE_has_scanned_for_encodings = 135
    RULE_known_regions = 136
    RULE_main_group = 137
    RULE_product_ref_group = 138
    RULE_package_references = 139
    RULE_project_dir_path = 140
    RULE_project_references = 141
    RULE_project_root = 142
    RULE_targets = 143
    RULE_input_file_list_paths = 144
    RULE_input_paths = 145
    RULE_output_file_list_paths = 146
    RULE_output_paths = 147
    RULE_shell_path = 148
    RULE_shell_script = 149
    RULE_show_env_vars_in_log = 150
    RULE_target = 151
    RULE_target_proxy = 152
    RULE_file_type = 153
    RULE_remote_ref = 154
    RULE_base_configuration_reference = 155
    RULE_build_settings = 156
    RULE_dst_path = 157
    RULE_dst_subfolder_spec = 158
    RULE_project_references_list = 159
    RULE_project_references_list_element = 160
    RULE_key_value = 161
    RULE_build_configurations = 162
    RULE_default_configuration_is_visible = 163
    RULE_default_configuration_name = 164
    RULE_settings = 165
    RULE_system_capabilities = 166
    RULE_current_version = 167
    RULE_version_group_type = 168
    RULE_class_prefix = 169
    RULE_any_string = 170

    ruleNames =  [ "start", "root_element", "archive_version", "classes", 
                   "object_version", "objects", "root_object", "pbx_aggregate_target_section", 
                   "pbx_build_file_section", "pbx_container_item_proxy_section", 
                   "pbx_copy_files_build_phase_section", "pbx_file_reference_section", 
                   "pbx_frameworks_build_phase_section", "pbx_group_section", 
                   "pbx_headers_build_phase_section", "pbx_native_target_section", 
                   "pbx_legacy_target_section", "pbx_project_section", "pbx_reference_proxy_section", 
                   "pbx_resources_build_phase_section", "pbx_shell_script_build_phase_section", 
                   "pbx_sources_build_phase_section", "pbx_target_dependency_section", 
                   "pbx_variant_group_section", "xc_build_configuration_section", 
                   "xc_configuration_list_section", "xc_remote_swift_package_reference_section", 
                   "xc_swift_package_product_dependency_section", "xc_version_group_section", 
                   "pbx_aggregate_target", "pbx_build_file", "pbx_container_item_proxy", 
                   "pbx_copy_files_build_phase", "pbx_file_reference", "pbx_frameworks_build_phase", 
                   "pbx_group", "pbx_headers_build_phase", "pbx_native_target", 
                   "pbx_legacy_target", "pbx_project", "pbx_reference_proxy", 
                   "pbx_resources_build_phase", "pbx_shell_script_build_phase", 
                   "pbx_sources_build_phase", "pbx_target_dependency", "pbx_variant_group", 
                   "xc_build_configuration", "xc_configuration_list", "xc_remote_swift_package_reference", 
                   "xc_swift_package_product_dependency", "xc_version_group", 
                   "isa_pbx_aggregate_target", "isa_pbx_build_file", "isa_pbx_container_item_proxy", 
                   "isa_pbx_copy_files_build_phase", "isa_pbx_file_reference", 
                   "isa_pbx_frameworks_build_phase", "isa_pbx_group", "isa_pbx_header_build_phase", 
                   "isa_pbx_native_target", "isa_pbx_legacy_target", "isa_pbx_project", 
                   "isa_pbx_reference_proxy", "isa_pbx_resources_build_phase", 
                   "isa_pbx_shell_script_build_phase", "isa_pbx_sources_build_phase", 
                   "isa_pbx_target_dependency", "isa_pbx_variant_group", 
                   "isa_xc_build_configuration", "isa_xc_configuration_list", 
                   "isa_xc_remote_swift_package_reference", "isa_xc_swift_package_product_dependency", 
                   "isa_xc_version_group", "file_ref", "product_ref", "container_portal", 
                   "proxy_type", "remote_global_id_string", "remote_info", 
                   "file_encoding", "comments", "explicit_file_type", "last_known_file_type", 
                   "include_in_index", "indent_width", "tab_width", "uses_tabs", 
                   "wraps_lines", "platform_filter", "children", "product_install_path", 
                   "repository_url", "requirement", "xc_package", "package_product_dependencies", 
                   "name", "path", "source_tree", "build_action_mask", "files", 
                   "run_only_for_deployment_postprocessing", "reference_list", 
                   "any_string_list", "non_quoted_strings_list", "build_configuration_list", 
                   "build_phases", "build_rules", "build_arguments_string", 
                   "build_tool_path", "build_working_directory", "pass_build_settings_in_environment", 
                   "dependencies", "product_name", "product_reference", 
                   "product_type", "line_ending", "xc_language_specification_identifier", 
                   "plist_structure_definition_identifier", "attributes", 
                   "last_swift_migration", "default_build_system_type_for_workspace", 
                   "last_swift_update_check", "build_targets_in_parallel", 
                   "last_testing_upgrade_check", "last_upgrade_check", "organization_name", 
                   "target_attributes", "target_attribute", "created_on_tools_version", 
                   "test_target_id", "development_team", "development_team_name", 
                   "provisioning_style", "compatibility_version", "development_region", 
                   "has_scanned_for_encodings", "known_regions", "main_group", 
                   "product_ref_group", "package_references", "project_dir_path", 
                   "project_references", "project_root", "targets", "input_file_list_paths", 
                   "input_paths", "output_file_list_paths", "output_paths", 
                   "shell_path", "shell_script", "show_env_vars_in_log", 
                   "target", "target_proxy", "file_type", "remote_ref", 
                   "base_configuration_reference", "build_settings", "dst_path", 
                   "dst_subfolder_spec", "project_references_list", "project_references_list_element", 
                   "key_value", "build_configurations", "default_configuration_is_visible", 
                   "default_configuration_name", "settings", "system_capabilities", 
                   "current_version", "version_group_type", "class_prefix", 
                   "any_string" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    CLASSES=124
    ISA=125
    OBJECTS=126
    ROOT_OBJECT=127
    NUMBER=128
    DOT=129
    ALPHA_NUMERIC=130
    ALPHA_NUMERIC_CAP=131
    DASH=132
    UNDERSCORE=133
    SLASH=134
    REFERENCE=135
    QUOTED_STRING=136
    NON_QUOTED_STRING=137
    VARIABLE=138
    WS=139
    COMMENT=140
    LINE_COMMENT=141

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def root_element(self):
            return self.getTypedRuleContext(PBXProjParser.Root_elementContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = PBXProjParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self.root_element()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Root_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def archive_version(self):
            return self.getTypedRuleContext(PBXProjParser.Archive_versionContext,0)


        def classes(self):
            return self.getTypedRuleContext(PBXProjParser.ClassesContext,0)


        def object_version(self):
            return self.getTypedRuleContext(PBXProjParser.Object_versionContext,0)


        def objects(self):
            return self.getTypedRuleContext(PBXProjParser.ObjectsContext,0)


        def root_object(self):
            return self.getTypedRuleContext(PBXProjParser.Root_objectContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_root_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot_element" ):
                listener.enterRoot_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot_element" ):
                listener.exitRoot_element(self)




    def root_element(self):

        localctx = PBXProjParser.Root_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_root_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self.match(PBXProjParser.T__0)
            self.state = 345
            self.archive_version()
            self.state = 346
            self.classes()
            self.state = 347
            self.object_version()
            self.state = 348
            self.objects()
            self.state = 349
            self.root_object()
            self.state = 350
            self.match(PBXProjParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Archive_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_archive_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArchive_version" ):
                listener.enterArchive_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArchive_version" ):
                listener.exitArchive_version(self)




    def archive_version(self):

        localctx = PBXProjParser.Archive_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_archive_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            self.match(PBXProjParser.T__2)
            self.state = 353
            self.match(PBXProjParser.T__3)
            self.state = 354
            self.match(PBXProjParser.NUMBER)
            self.state = 355
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASSES(self):
            return self.getToken(PBXProjParser.CLASSES, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_classes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasses" ):
                listener.enterClasses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasses" ):
                listener.exitClasses(self)




    def classes(self):

        localctx = PBXProjParser.ClassesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_classes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(PBXProjParser.CLASSES)
            self.state = 358
            self.match(PBXProjParser.T__3)
            self.state = 359
            self.match(PBXProjParser.T__0)
            self.state = 360
            self.match(PBXProjParser.T__1)
            self.state = 361
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Object_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_object_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObject_version" ):
                listener.enterObject_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObject_version" ):
                listener.exitObject_version(self)




    def object_version(self):

        localctx = PBXProjParser.Object_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_object_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(PBXProjParser.T__5)
            self.state = 364
            self.match(PBXProjParser.T__3)
            self.state = 365
            self.match(PBXProjParser.NUMBER)
            self.state = 366
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECTS(self):
            return self.getToken(PBXProjParser.OBJECTS, 0)

        def pbx_file_reference_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_file_reference_sectionContext,0)


        def pbx_group_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_group_sectionContext,0)


        def pbx_project_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_project_sectionContext,0)


        def xc_build_configuration_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_build_configuration_sectionContext,0)


        def xc_configuration_list_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_configuration_list_sectionContext,0)


        def pbx_aggregate_target_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_aggregate_target_sectionContext,0)


        def pbx_build_file_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_build_file_sectionContext,0)


        def pbx_container_item_proxy_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_container_item_proxy_sectionContext,0)


        def pbx_copy_files_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_copy_files_build_phase_sectionContext,0)


        def pbx_frameworks_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_frameworks_build_phase_sectionContext,0)


        def pbx_headers_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_headers_build_phase_sectionContext,0)


        def pbx_legacy_target_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_legacy_target_sectionContext,0)


        def pbx_native_target_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_native_target_sectionContext,0)


        def pbx_reference_proxy_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_reference_proxy_sectionContext,0)


        def pbx_resources_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_resources_build_phase_sectionContext,0)


        def pbx_shell_script_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_shell_script_build_phase_sectionContext,0)


        def pbx_sources_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_sources_build_phase_sectionContext,0)


        def pbx_target_dependency_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_target_dependency_sectionContext,0)


        def pbx_variant_group_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_variant_group_sectionContext,0)


        def xc_remote_swift_package_reference_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_remote_swift_package_reference_sectionContext,0)


        def xc_swift_package_product_dependency_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_swift_package_product_dependency_sectionContext,0)


        def xc_version_group_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_version_group_sectionContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_objects

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjects" ):
                listener.enterObjects(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjects" ):
                listener.exitObjects(self)




    def objects(self):

        localctx = PBXProjParser.ObjectsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_objects)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 368
            self.match(PBXProjParser.OBJECTS)
            self.state = 369
            self.match(PBXProjParser.T__3)
            self.state = 370
            self.match(PBXProjParser.T__0)
            self.state = 372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 371
                self.pbx_aggregate_target_section()


            self.state = 375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 374
                self.pbx_build_file_section()


            self.state = 378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 377
                self.pbx_container_item_proxy_section()


            self.state = 381
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 380
                self.pbx_copy_files_build_phase_section()


            self.state = 383
            self.pbx_file_reference_section()
            self.state = 385
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 384
                self.pbx_frameworks_build_phase_section()


            self.state = 387
            self.pbx_group_section()
            self.state = 389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 388
                self.pbx_headers_build_phase_section()


            self.state = 392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 391
                self.pbx_legacy_target_section()


            self.state = 395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 394
                self.pbx_native_target_section()


            self.state = 397
            self.pbx_project_section()
            self.state = 399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 398
                self.pbx_reference_proxy_section()


            self.state = 402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 401
                self.pbx_resources_build_phase_section()


            self.state = 405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 404
                self.pbx_shell_script_build_phase_section()


            self.state = 408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 407
                self.pbx_sources_build_phase_section()


            self.state = 411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 410
                self.pbx_target_dependency_section()


            self.state = 414
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 413
                self.pbx_variant_group_section()


            self.state = 416
            self.xc_build_configuration_section()
            self.state = 417
            self.xc_configuration_list_section()
            self.state = 419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 418
                self.xc_remote_swift_package_reference_section()


            self.state = 422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 421
                self.xc_swift_package_product_dependency_section()


            self.state = 425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.REFERENCE:
                self.state = 424
                self.xc_version_group_section()


            self.state = 427
            self.match(PBXProjParser.T__1)
            self.state = 428
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Root_objectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROOT_OBJECT(self):
            return self.getToken(PBXProjParser.ROOT_OBJECT, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_root_object

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot_object" ):
                listener.enterRoot_object(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot_object" ):
                listener.exitRoot_object(self)




    def root_object(self):

        localctx = PBXProjParser.Root_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_root_object)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 430
            self.match(PBXProjParser.ROOT_OBJECT)
            self.state = 431
            self.match(PBXProjParser.T__3)
            self.state = 432
            self.match(PBXProjParser.REFERENCE)
            self.state = 433
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_aggregate_target_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_aggregate_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_aggregate_targetContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_aggregate_targetContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_aggregate_target_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_aggregate_target_section" ):
                listener.enterPbx_aggregate_target_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_aggregate_target_section" ):
                listener.exitPbx_aggregate_target_section(self)




    def pbx_aggregate_target_section(self):

        localctx = PBXProjParser.Pbx_aggregate_target_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_pbx_aggregate_target_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 435
                    self.pbx_aggregate_target()

                else:
                    raise NoViableAltException(self)
                self.state = 438 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_build_file_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_build_file(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_build_fileContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_build_fileContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_build_file_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_build_file_section" ):
                listener.enterPbx_build_file_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_build_file_section" ):
                listener.exitPbx_build_file_section(self)




    def pbx_build_file_section(self):

        localctx = PBXProjParser.Pbx_build_file_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_pbx_build_file_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 440
                    self.pbx_build_file()

                else:
                    raise NoViableAltException(self)
                self.state = 443 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_container_item_proxy_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_container_item_proxy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_container_item_proxyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_container_item_proxyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_container_item_proxy_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_container_item_proxy_section" ):
                listener.enterPbx_container_item_proxy_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_container_item_proxy_section" ):
                listener.exitPbx_container_item_proxy_section(self)




    def pbx_container_item_proxy_section(self):

        localctx = PBXProjParser.Pbx_container_item_proxy_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_pbx_container_item_proxy_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 445
                    self.pbx_container_item_proxy()

                else:
                    raise NoViableAltException(self)
                self.state = 448 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_copy_files_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_copy_files_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_copy_files_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_copy_files_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_copy_files_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_copy_files_build_phase_section" ):
                listener.enterPbx_copy_files_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_copy_files_build_phase_section" ):
                listener.exitPbx_copy_files_build_phase_section(self)




    def pbx_copy_files_build_phase_section(self):

        localctx = PBXProjParser.Pbx_copy_files_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_pbx_copy_files_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 450
                    self.pbx_copy_files_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 453 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_file_reference_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_file_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_file_referenceContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_file_referenceContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_file_reference_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_file_reference_section" ):
                listener.enterPbx_file_reference_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_file_reference_section" ):
                listener.exitPbx_file_reference_section(self)




    def pbx_file_reference_section(self):

        localctx = PBXProjParser.Pbx_file_reference_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_pbx_file_reference_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 455
                    self.pbx_file_reference()

                else:
                    raise NoViableAltException(self)
                self.state = 458 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_frameworks_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_frameworks_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_frameworks_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_frameworks_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_frameworks_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_frameworks_build_phase_section" ):
                listener.enterPbx_frameworks_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_frameworks_build_phase_section" ):
                listener.exitPbx_frameworks_build_phase_section(self)




    def pbx_frameworks_build_phase_section(self):

        localctx = PBXProjParser.Pbx_frameworks_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_pbx_frameworks_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 461 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 460
                    self.pbx_frameworks_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 463 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_group_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_groupContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_groupContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_group_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_group_section" ):
                listener.enterPbx_group_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_group_section" ):
                listener.exitPbx_group_section(self)




    def pbx_group_section(self):

        localctx = PBXProjParser.Pbx_group_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_pbx_group_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 465
                    self.pbx_group()

                else:
                    raise NoViableAltException(self)
                self.state = 468 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_headers_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_headers_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_headers_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_headers_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_headers_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_headers_build_phase_section" ):
                listener.enterPbx_headers_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_headers_build_phase_section" ):
                listener.exitPbx_headers_build_phase_section(self)




    def pbx_headers_build_phase_section(self):

        localctx = PBXProjParser.Pbx_headers_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_pbx_headers_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 470
                    self.pbx_headers_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 473 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_native_target_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_native_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_native_targetContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_native_targetContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_native_target_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_native_target_section" ):
                listener.enterPbx_native_target_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_native_target_section" ):
                listener.exitPbx_native_target_section(self)




    def pbx_native_target_section(self):

        localctx = PBXProjParser.Pbx_native_target_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_pbx_native_target_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 475
                    self.pbx_native_target()

                else:
                    raise NoViableAltException(self)
                self.state = 478 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_legacy_target_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_legacy_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_legacy_targetContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_legacy_targetContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_legacy_target_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_legacy_target_section" ):
                listener.enterPbx_legacy_target_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_legacy_target_section" ):
                listener.exitPbx_legacy_target_section(self)




    def pbx_legacy_target_section(self):

        localctx = PBXProjParser.Pbx_legacy_target_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_pbx_legacy_target_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 480
                    self.pbx_legacy_target()

                else:
                    raise NoViableAltException(self)
                self.state = 483 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_project_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_project(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_projectContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_projectContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_project_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_project_section" ):
                listener.enterPbx_project_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_project_section" ):
                listener.exitPbx_project_section(self)




    def pbx_project_section(self):

        localctx = PBXProjParser.Pbx_project_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_pbx_project_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 485
                    self.pbx_project()

                else:
                    raise NoViableAltException(self)
                self.state = 488 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_reference_proxy_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_reference_proxy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_reference_proxyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_reference_proxyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_reference_proxy_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_reference_proxy_section" ):
                listener.enterPbx_reference_proxy_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_reference_proxy_section" ):
                listener.exitPbx_reference_proxy_section(self)




    def pbx_reference_proxy_section(self):

        localctx = PBXProjParser.Pbx_reference_proxy_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_pbx_reference_proxy_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 490
                    self.pbx_reference_proxy()

                else:
                    raise NoViableAltException(self)
                self.state = 493 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_resources_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_resources_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_resources_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_resources_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_resources_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_resources_build_phase_section" ):
                listener.enterPbx_resources_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_resources_build_phase_section" ):
                listener.exitPbx_resources_build_phase_section(self)




    def pbx_resources_build_phase_section(self):

        localctx = PBXProjParser.Pbx_resources_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pbx_resources_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 495
                    self.pbx_resources_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 498 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_shell_script_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_shell_script_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_shell_script_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_shell_script_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_shell_script_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_shell_script_build_phase_section" ):
                listener.enterPbx_shell_script_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_shell_script_build_phase_section" ):
                listener.exitPbx_shell_script_build_phase_section(self)




    def pbx_shell_script_build_phase_section(self):

        localctx = PBXProjParser.Pbx_shell_script_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_pbx_shell_script_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 500
                    self.pbx_shell_script_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 503 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_sources_build_phase_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_sources_build_phase(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_sources_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_sources_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_sources_build_phase_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_sources_build_phase_section" ):
                listener.enterPbx_sources_build_phase_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_sources_build_phase_section" ):
                listener.exitPbx_sources_build_phase_section(self)




    def pbx_sources_build_phase_section(self):

        localctx = PBXProjParser.Pbx_sources_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_pbx_sources_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 505
                    self.pbx_sources_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 508 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_target_dependency_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_target_dependency(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_target_dependencyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_target_dependencyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_target_dependency_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_target_dependency_section" ):
                listener.enterPbx_target_dependency_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_target_dependency_section" ):
                listener.exitPbx_target_dependency_section(self)




    def pbx_target_dependency_section(self):

        localctx = PBXProjParser.Pbx_target_dependency_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_pbx_target_dependency_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 511 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 510
                    self.pbx_target_dependency()

                else:
                    raise NoViableAltException(self)
                self.state = 513 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_variant_group_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pbx_variant_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_variant_groupContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_variant_groupContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_variant_group_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_variant_group_section" ):
                listener.enterPbx_variant_group_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_variant_group_section" ):
                listener.exitPbx_variant_group_section(self)




    def pbx_variant_group_section(self):

        localctx = PBXProjParser.Pbx_variant_group_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_pbx_variant_group_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 515
                    self.pbx_variant_group()

                else:
                    raise NoViableAltException(self)
                self.state = 518 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_build_configuration_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_build_configuration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_build_configurationContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_build_configurationContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_build_configuration_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_build_configuration_section" ):
                listener.enterXc_build_configuration_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_build_configuration_section" ):
                listener.exitXc_build_configuration_section(self)




    def xc_build_configuration_section(self):

        localctx = PBXProjParser.Xc_build_configuration_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_xc_build_configuration_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 520
                    self.xc_build_configuration()

                else:
                    raise NoViableAltException(self)
                self.state = 523 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,34,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_configuration_list_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_configuration_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_configuration_listContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_configuration_listContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_configuration_list_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_configuration_list_section" ):
                listener.enterXc_configuration_list_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_configuration_list_section" ):
                listener.exitXc_configuration_list_section(self)




    def xc_configuration_list_section(self):

        localctx = PBXProjParser.Xc_configuration_list_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_xc_configuration_list_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 525
                    self.xc_configuration_list()

                else:
                    raise NoViableAltException(self)
                self.state = 528 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_remote_swift_package_reference_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_remote_swift_package_reference(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_remote_swift_package_referenceContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_remote_swift_package_referenceContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_remote_swift_package_reference_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_remote_swift_package_reference_section" ):
                listener.enterXc_remote_swift_package_reference_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_remote_swift_package_reference_section" ):
                listener.exitXc_remote_swift_package_reference_section(self)




    def xc_remote_swift_package_reference_section(self):

        localctx = PBXProjParser.Xc_remote_swift_package_reference_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_xc_remote_swift_package_reference_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 531 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 530
                    self.xc_remote_swift_package_reference()

                else:
                    raise NoViableAltException(self)
                self.state = 533 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_swift_package_product_dependency_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_swift_package_product_dependency(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_swift_package_product_dependencyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_swift_package_product_dependencyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_swift_package_product_dependency_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_swift_package_product_dependency_section" ):
                listener.enterXc_swift_package_product_dependency_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_swift_package_product_dependency_section" ):
                listener.exitXc_swift_package_product_dependency_section(self)




    def xc_swift_package_product_dependency_section(self):

        localctx = PBXProjParser.Xc_swift_package_product_dependency_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_xc_swift_package_product_dependency_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 535
                    self.xc_swift_package_product_dependency()

                else:
                    raise NoViableAltException(self)
                self.state = 538 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_version_group_sectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xc_version_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_version_groupContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_version_groupContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_version_group_section

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_version_group_section" ):
                listener.enterXc_version_group_section(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_version_group_section" ):
                listener.exitXc_version_group_section(self)




    def xc_version_group_section(self):

        localctx = PBXProjParser.Xc_version_group_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_xc_version_group_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 540
                self.xc_version_group()
                self.state = 543 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PBXProjParser.REFERENCE):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_aggregate_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_aggregate_target(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_aggregate_targetContext,0)


        def build_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configuration_listContext,0)


        def build_phases(self):
            return self.getTypedRuleContext(PBXProjParser.Build_phasesContext,0)


        def dependencies(self):
            return self.getTypedRuleContext(PBXProjParser.DependenciesContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def product_name(self):
            return self.getTypedRuleContext(PBXProjParser.Product_nameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_aggregate_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_aggregate_target" ):
                listener.enterPbx_aggregate_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_aggregate_target" ):
                listener.exitPbx_aggregate_target(self)




    def pbx_aggregate_target(self):

        localctx = PBXProjParser.Pbx_aggregate_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_pbx_aggregate_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.match(PBXProjParser.REFERENCE)
            self.state = 546
            self.match(PBXProjParser.T__3)
            self.state = 547
            self.match(PBXProjParser.T__0)
            self.state = 548
            self.isa_pbx_aggregate_target()
            self.state = 549
            self.build_configuration_list()
            self.state = 550
            self.build_phases()
            self.state = 551
            self.dependencies()
            self.state = 552
            self.name()
            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__67:
                self.state = 553
                self.product_name()


            self.state = 556
            self.match(PBXProjParser.T__1)
            self.state = 557
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_build_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_build_file(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_build_fileContext,0)


        def file_ref(self):
            return self.getTypedRuleContext(PBXProjParser.File_refContext,0)


        def platform_filter(self):
            return self.getTypedRuleContext(PBXProjParser.Platform_filterContext,0)


        def product_ref(self):
            return self.getTypedRuleContext(PBXProjParser.Product_refContext,0)


        def settings(self):
            return self.getTypedRuleContext(PBXProjParser.SettingsContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_build_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_build_file" ):
                listener.enterPbx_build_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_build_file" ):
                listener.exitPbx_build_file(self)




    def pbx_build_file(self):

        localctx = PBXProjParser.Pbx_build_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_pbx_build_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.match(PBXProjParser.REFERENCE)
            self.state = 560
            self.match(PBXProjParser.T__3)
            self.state = 561
            self.match(PBXProjParser.T__0)
            self.state = 562
            self.isa_pbx_build_file()
            self.state = 564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__28:
                self.state = 563
                self.file_ref()


            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__43:
                self.state = 566
                self.platform_filter()


            self.state = 570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__29:
                self.state = 569
                self.product_ref()


            self.state = 573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__118:
                self.state = 572
                self.settings()


            self.state = 575
            self.match(PBXProjParser.T__1)
            self.state = 576
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_container_item_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_container_item_proxy(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_container_item_proxyContext,0)


        def container_portal(self):
            return self.getTypedRuleContext(PBXProjParser.Container_portalContext,0)


        def proxy_type(self):
            return self.getTypedRuleContext(PBXProjParser.Proxy_typeContext,0)


        def remote_global_id_string(self):
            return self.getTypedRuleContext(PBXProjParser.Remote_global_id_stringContext,0)


        def remote_info(self):
            return self.getTypedRuleContext(PBXProjParser.Remote_infoContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_container_item_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_container_item_proxy" ):
                listener.enterPbx_container_item_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_container_item_proxy" ):
                listener.exitPbx_container_item_proxy(self)




    def pbx_container_item_proxy(self):

        localctx = PBXProjParser.Pbx_container_item_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_pbx_container_item_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(PBXProjParser.REFERENCE)
            self.state = 579
            self.match(PBXProjParser.T__3)
            self.state = 580
            self.match(PBXProjParser.T__0)
            self.state = 581
            self.isa_pbx_container_item_proxy()
            self.state = 582
            self.container_portal()
            self.state = 583
            self.proxy_type()
            self.state = 584
            self.remote_global_id_string()
            self.state = 585
            self.remote_info()
            self.state = 586
            self.match(PBXProjParser.T__1)
            self.state = 587
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_copy_files_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_copy_files_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_copy_files_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def dst_path(self):
            return self.getTypedRuleContext(PBXProjParser.Dst_pathContext,0)


        def dst_subfolder_spec(self):
            return self.getTypedRuleContext(PBXProjParser.Dst_subfolder_specContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_copy_files_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_copy_files_build_phase" ):
                listener.enterPbx_copy_files_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_copy_files_build_phase" ):
                listener.exitPbx_copy_files_build_phase(self)




    def pbx_copy_files_build_phase(self):

        localctx = PBXProjParser.Pbx_copy_files_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_pbx_copy_files_build_phase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.match(PBXProjParser.REFERENCE)
            self.state = 590
            self.match(PBXProjParser.T__3)
            self.state = 591
            self.match(PBXProjParser.T__0)
            self.state = 592
            self.isa_pbx_copy_files_build_phase()
            self.state = 593
            self.build_action_mask()
            self.state = 594
            self.dst_path()
            self.state = 595
            self.dst_subfolder_spec()
            self.state = 596
            self.files()
            self.state = 598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__50:
                self.state = 597
                self.name()


            self.state = 600
            self.run_only_for_deployment_postprocessing()
            self.state = 601
            self.match(PBXProjParser.T__1)
            self.state = 602
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_file_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_file_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_file_referenceContext,0)


        def comments(self):
            return self.getTypedRuleContext(PBXProjParser.CommentsContext,0)


        def explicit_file_type(self):
            return self.getTypedRuleContext(PBXProjParser.Explicit_file_typeContext,0)


        def file_encoding(self):
            return self.getTypedRuleContext(PBXProjParser.File_encodingContext,0)


        def include_in_index(self):
            return self.getTypedRuleContext(PBXProjParser.Include_in_indexContext,0)


        def indent_width(self):
            return self.getTypedRuleContext(PBXProjParser.Indent_widthContext,0)


        def last_known_file_type(self):
            return self.getTypedRuleContext(PBXProjParser.Last_known_file_typeContext,0)


        def line_ending(self):
            return self.getTypedRuleContext(PBXProjParser.Line_endingContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def plist_structure_definition_identifier(self):
            return self.getTypedRuleContext(PBXProjParser.Plist_structure_definition_identifierContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def tab_width(self):
            return self.getTypedRuleContext(PBXProjParser.Tab_widthContext,0)


        def xc_language_specification_identifier(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_language_specification_identifierContext,0)


        def uses_tabs(self):
            return self.getTypedRuleContext(PBXProjParser.Uses_tabsContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_file_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_file_reference" ):
                listener.enterPbx_file_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_file_reference" ):
                listener.exitPbx_file_reference(self)




    def pbx_file_reference(self):

        localctx = PBXProjParser.Pbx_file_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_pbx_file_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self.match(PBXProjParser.REFERENCE)
            self.state = 605
            self.match(PBXProjParser.T__3)
            self.state = 606
            self.match(PBXProjParser.T__0)
            self.state = 607
            self.isa_pbx_file_reference()
            self.state = 609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__35:
                self.state = 608
                self.comments()


            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__36:
                self.state = 611
                self.explicit_file_type()


            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__34:
                self.state = 614
                self.file_encoding()


            self.state = 618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__38:
                self.state = 617
                self.include_in_index()


            self.state = 621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__39:
                self.state = 620
                self.indent_width()


            self.state = 624
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__37:
                self.state = 623
                self.last_known_file_type()


            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__70:
                self.state = 626
                self.line_ending()


            self.state = 630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__50:
                self.state = 629
                self.name()


            self.state = 633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__51:
                self.state = 632
                self.path()


            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__72:
                self.state = 635
                self.plist_structure_definition_identifier()


            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__52:
                self.state = 638
                self.source_tree()


            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__40:
                self.state = 641
                self.tab_width()


            self.state = 645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__71:
                self.state = 644
                self.xc_language_specification_identifier()


            self.state = 648
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__41:
                self.state = 647
                self.uses_tabs()


            self.state = 650
            self.match(PBXProjParser.T__1)
            self.state = 651
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_frameworks_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_frameworks_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_frameworks_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_frameworks_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_frameworks_build_phase" ):
                listener.enterPbx_frameworks_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_frameworks_build_phase" ):
                listener.exitPbx_frameworks_build_phase(self)




    def pbx_frameworks_build_phase(self):

        localctx = PBXProjParser.Pbx_frameworks_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_pbx_frameworks_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.match(PBXProjParser.REFERENCE)
            self.state = 654
            self.match(PBXProjParser.T__3)
            self.state = 655
            self.match(PBXProjParser.T__0)
            self.state = 656
            self.isa_pbx_frameworks_build_phase()
            self.state = 657
            self.build_action_mask()
            self.state = 658
            self.files()
            self.state = 659
            self.run_only_for_deployment_postprocessing()
            self.state = 660
            self.match(PBXProjParser.T__1)
            self.state = 661
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_group(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_groupContext,0)


        def children(self):
            return self.getTypedRuleContext(PBXProjParser.ChildrenContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def indent_width(self):
            return self.getTypedRuleContext(PBXProjParser.Indent_widthContext,0)


        def include_in_index(self):
            return self.getTypedRuleContext(PBXProjParser.Include_in_indexContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def tab_width(self):
            return self.getTypedRuleContext(PBXProjParser.Tab_widthContext,0)


        def uses_tabs(self):
            return self.getTypedRuleContext(PBXProjParser.Uses_tabsContext,0)


        def wraps_lines(self):
            return self.getTypedRuleContext(PBXProjParser.Wraps_linesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_group" ):
                listener.enterPbx_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_group" ):
                listener.exitPbx_group(self)




    def pbx_group(self):

        localctx = PBXProjParser.Pbx_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_pbx_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.match(PBXProjParser.REFERENCE)
            self.state = 664
            self.match(PBXProjParser.T__3)
            self.state = 665
            self.match(PBXProjParser.T__0)
            self.state = 666
            self.isa_pbx_group()
            self.state = 667
            self.children()
            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__39:
                self.state = 668
                self.indent_width()


            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__38:
                self.state = 671
                self.include_in_index()


            self.state = 675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__50:
                self.state = 674
                self.name()


            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__51:
                self.state = 677
                self.path()


            self.state = 680
            self.source_tree()
            self.state = 682
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__40:
                self.state = 681
                self.tab_width()


            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__41:
                self.state = 684
                self.uses_tabs()


            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__42:
                self.state = 687
                self.wraps_lines()


            self.state = 690
            self.match(PBXProjParser.T__1)
            self.state = 691
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_headers_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_header_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_header_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_headers_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_headers_build_phase" ):
                listener.enterPbx_headers_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_headers_build_phase" ):
                listener.exitPbx_headers_build_phase(self)




    def pbx_headers_build_phase(self):

        localctx = PBXProjParser.Pbx_headers_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_pbx_headers_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(PBXProjParser.REFERENCE)
            self.state = 694
            self.match(PBXProjParser.T__3)
            self.state = 695
            self.match(PBXProjParser.T__0)
            self.state = 696
            self.isa_pbx_header_build_phase()
            self.state = 697
            self.build_action_mask()
            self.state = 698
            self.files()
            self.state = 699
            self.run_only_for_deployment_postprocessing()
            self.state = 700
            self.match(PBXProjParser.T__1)
            self.state = 701
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_native_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_native_target(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_native_targetContext,0)


        def build_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configuration_listContext,0)


        def build_phases(self):
            return self.getTypedRuleContext(PBXProjParser.Build_phasesContext,0)


        def build_rules(self):
            return self.getTypedRuleContext(PBXProjParser.Build_rulesContext,0)


        def dependencies(self):
            return self.getTypedRuleContext(PBXProjParser.DependenciesContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def product_name(self):
            return self.getTypedRuleContext(PBXProjParser.Product_nameContext,0)


        def product_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Product_referenceContext,0)


        def product_type(self):
            return self.getTypedRuleContext(PBXProjParser.Product_typeContext,0)


        def product_install_path(self):
            return self.getTypedRuleContext(PBXProjParser.Product_install_pathContext,0)


        def package_product_dependencies(self):
            return self.getTypedRuleContext(PBXProjParser.Package_product_dependenciesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_native_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_native_target" ):
                listener.enterPbx_native_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_native_target" ):
                listener.exitPbx_native_target(self)




    def pbx_native_target(self):

        localctx = PBXProjParser.Pbx_native_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_pbx_native_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(PBXProjParser.REFERENCE)
            self.state = 704
            self.match(PBXProjParser.T__3)
            self.state = 705
            self.match(PBXProjParser.T__0)
            self.state = 706
            self.isa_pbx_native_target()
            self.state = 707
            self.build_configuration_list()
            self.state = 708
            self.build_phases()
            self.state = 709
            self.build_rules()
            self.state = 710
            self.dependencies()
            self.state = 711
            self.name()
            self.state = 713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__45:
                self.state = 712
                self.product_install_path()


            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__49:
                self.state = 715
                self.package_product_dependencies()


            self.state = 718
            self.product_name()
            self.state = 719
            self.product_reference()
            self.state = 720
            self.product_type()
            self.state = 721
            self.match(PBXProjParser.T__1)
            self.state = 722
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_legacy_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_legacy_target(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_legacy_targetContext,0)


        def build_arguments_string(self):
            return self.getTypedRuleContext(PBXProjParser.Build_arguments_stringContext,0)


        def build_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configuration_listContext,0)


        def build_phases(self):
            return self.getTypedRuleContext(PBXProjParser.Build_phasesContext,0)


        def build_tool_path(self):
            return self.getTypedRuleContext(PBXProjParser.Build_tool_pathContext,0)


        def build_working_directory(self):
            return self.getTypedRuleContext(PBXProjParser.Build_working_directoryContext,0)


        def dependencies(self):
            return self.getTypedRuleContext(PBXProjParser.DependenciesContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def pass_build_settings_in_environment(self):
            return self.getTypedRuleContext(PBXProjParser.Pass_build_settings_in_environmentContext,0)


        def product_name(self):
            return self.getTypedRuleContext(PBXProjParser.Product_nameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_legacy_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_legacy_target" ):
                listener.enterPbx_legacy_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_legacy_target" ):
                listener.exitPbx_legacy_target(self)




    def pbx_legacy_target(self):

        localctx = PBXProjParser.Pbx_legacy_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_pbx_legacy_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(PBXProjParser.REFERENCE)
            self.state = 725
            self.match(PBXProjParser.T__3)
            self.state = 726
            self.match(PBXProjParser.T__0)
            self.state = 727
            self.isa_pbx_legacy_target()
            self.state = 728
            self.build_arguments_string()
            self.state = 729
            self.build_configuration_list()
            self.state = 730
            self.build_phases()
            self.state = 731
            self.build_tool_path()
            self.state = 732
            self.build_working_directory()
            self.state = 733
            self.dependencies()
            self.state = 734
            self.name()
            self.state = 735
            self.pass_build_settings_in_environment()
            self.state = 736
            self.product_name()
            self.state = 737
            self.match(PBXProjParser.T__1)
            self.state = 738
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_projectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_project(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_projectContext,0)


        def build_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configuration_listContext,0)


        def compatibility_version(self):
            return self.getTypedRuleContext(PBXProjParser.Compatibility_versionContext,0)


        def has_scanned_for_encodings(self):
            return self.getTypedRuleContext(PBXProjParser.Has_scanned_for_encodingsContext,0)


        def main_group(self):
            return self.getTypedRuleContext(PBXProjParser.Main_groupContext,0)


        def project_dir_path(self):
            return self.getTypedRuleContext(PBXProjParser.Project_dir_pathContext,0)


        def project_root(self):
            return self.getTypedRuleContext(PBXProjParser.Project_rootContext,0)


        def targets(self):
            return self.getTypedRuleContext(PBXProjParser.TargetsContext,0)


        def attributes(self):
            return self.getTypedRuleContext(PBXProjParser.AttributesContext,0)


        def development_region(self):
            return self.getTypedRuleContext(PBXProjParser.Development_regionContext,0)


        def known_regions(self):
            return self.getTypedRuleContext(PBXProjParser.Known_regionsContext,0)


        def package_references(self):
            return self.getTypedRuleContext(PBXProjParser.Package_referencesContext,0)


        def product_ref_group(self):
            return self.getTypedRuleContext(PBXProjParser.Product_ref_groupContext,0)


        def project_references(self):
            return self.getTypedRuleContext(PBXProjParser.Project_referencesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_project

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_project" ):
                listener.enterPbx_project(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_project" ):
                listener.exitPbx_project(self)




    def pbx_project(self):

        localctx = PBXProjParser.Pbx_projectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_pbx_project)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.match(PBXProjParser.REFERENCE)
            self.state = 741
            self.match(PBXProjParser.T__3)
            self.state = 742
            self.match(PBXProjParser.T__0)
            self.state = 743
            self.isa_pbx_project()
            self.state = 745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__73:
                self.state = 744
                self.attributes()


            self.state = 747
            self.build_configuration_list()
            self.state = 748
            self.compatibility_version()
            self.state = 750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__88:
                self.state = 749
                self.development_region()


            self.state = 752
            self.has_scanned_for_encodings()
            self.state = 754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__90:
                self.state = 753
                self.known_regions()


            self.state = 756
            self.main_group()
            self.state = 758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__93:
                self.state = 757
                self.package_references()


            self.state = 761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__92:
                self.state = 760
                self.product_ref_group()


            self.state = 763
            self.project_dir_path()
            self.state = 765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__95:
                self.state = 764
                self.project_references()


            self.state = 767
            self.project_root()
            self.state = 768
            self.targets()
            self.state = 769
            self.match(PBXProjParser.T__1)
            self.state = 770
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_reference_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_reference_proxy(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_reference_proxyContext,0)


        def file_type(self):
            return self.getTypedRuleContext(PBXProjParser.File_typeContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def remote_ref(self):
            return self.getTypedRuleContext(PBXProjParser.Remote_refContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_reference_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_reference_proxy" ):
                listener.enterPbx_reference_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_reference_proxy" ):
                listener.exitPbx_reference_proxy(self)




    def pbx_reference_proxy(self):

        localctx = PBXProjParser.Pbx_reference_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_pbx_reference_proxy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.match(PBXProjParser.REFERENCE)
            self.state = 773
            self.match(PBXProjParser.T__3)
            self.state = 774
            self.match(PBXProjParser.T__0)
            self.state = 775
            self.isa_pbx_reference_proxy()
            self.state = 776
            self.file_type()
            self.state = 778
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__50:
                self.state = 777
                self.name()


            self.state = 780
            self.path()
            self.state = 781
            self.remote_ref()
            self.state = 782
            self.source_tree()
            self.state = 783
            self.match(PBXProjParser.T__1)
            self.state = 784
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_resources_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_resources_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_resources_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_resources_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_resources_build_phase" ):
                listener.enterPbx_resources_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_resources_build_phase" ):
                listener.exitPbx_resources_build_phase(self)




    def pbx_resources_build_phase(self):

        localctx = PBXProjParser.Pbx_resources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_pbx_resources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.match(PBXProjParser.REFERENCE)
            self.state = 787
            self.match(PBXProjParser.T__3)
            self.state = 788
            self.match(PBXProjParser.T__0)
            self.state = 789
            self.isa_pbx_resources_build_phase()
            self.state = 790
            self.build_action_mask()
            self.state = 791
            self.files()
            self.state = 792
            self.run_only_for_deployment_postprocessing()
            self.state = 793
            self.match(PBXProjParser.T__1)
            self.state = 794
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_shell_script_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_shell_script_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_shell_script_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def shell_path(self):
            return self.getTypedRuleContext(PBXProjParser.Shell_pathContext,0)


        def shell_script(self):
            return self.getTypedRuleContext(PBXProjParser.Shell_scriptContext,0)


        def input_file_list_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Input_file_list_pathsContext,0)


        def input_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Input_pathsContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def output_file_list_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Output_file_list_pathsContext,0)


        def output_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Output_pathsContext,0)


        def show_env_vars_in_log(self):
            return self.getTypedRuleContext(PBXProjParser.Show_env_vars_in_logContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_shell_script_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_shell_script_build_phase" ):
                listener.enterPbx_shell_script_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_shell_script_build_phase" ):
                listener.exitPbx_shell_script_build_phase(self)




    def pbx_shell_script_build_phase(self):

        localctx = PBXProjParser.Pbx_shell_script_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_pbx_shell_script_build_phase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(PBXProjParser.REFERENCE)
            self.state = 797
            self.match(PBXProjParser.T__3)
            self.state = 798
            self.match(PBXProjParser.T__0)
            self.state = 799
            self.isa_pbx_shell_script_build_phase()
            self.state = 800
            self.build_action_mask()
            self.state = 801
            self.files()
            self.state = 803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__98:
                self.state = 802
                self.input_file_list_paths()


            self.state = 806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__99:
                self.state = 805
                self.input_paths()


            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__50:
                self.state = 808
                self.name()


            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__100:
                self.state = 811
                self.output_file_list_paths()


            self.state = 815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__101:
                self.state = 814
                self.output_paths()


            self.state = 817
            self.run_only_for_deployment_postprocessing()
            self.state = 818
            self.shell_path()
            self.state = 819
            self.shell_script()
            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__104:
                self.state = 820
                self.show_env_vars_in_log()


            self.state = 823
            self.match(PBXProjParser.T__1)
            self.state = 824
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_sources_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_sources_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_sources_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_sources_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_sources_build_phase" ):
                listener.enterPbx_sources_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_sources_build_phase" ):
                listener.exitPbx_sources_build_phase(self)




    def pbx_sources_build_phase(self):

        localctx = PBXProjParser.Pbx_sources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_pbx_sources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.match(PBXProjParser.REFERENCE)
            self.state = 827
            self.match(PBXProjParser.T__3)
            self.state = 828
            self.match(PBXProjParser.T__0)
            self.state = 829
            self.isa_pbx_sources_build_phase()
            self.state = 830
            self.build_action_mask()
            self.state = 831
            self.files()
            self.state = 832
            self.run_only_for_deployment_postprocessing()
            self.state = 833
            self.match(PBXProjParser.T__1)
            self.state = 834
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_target_dependencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_target_dependency(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_target_dependencyContext,0)


        def target_proxy(self):
            return self.getTypedRuleContext(PBXProjParser.Target_proxyContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def platform_filter(self):
            return self.getTypedRuleContext(PBXProjParser.Platform_filterContext,0)


        def target(self):
            return self.getTypedRuleContext(PBXProjParser.TargetContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_target_dependency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_target_dependency" ):
                listener.enterPbx_target_dependency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_target_dependency" ):
                listener.exitPbx_target_dependency(self)




    def pbx_target_dependency(self):

        localctx = PBXProjParser.Pbx_target_dependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_pbx_target_dependency)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self.match(PBXProjParser.REFERENCE)
            self.state = 837
            self.match(PBXProjParser.T__3)
            self.state = 838
            self.match(PBXProjParser.T__0)
            self.state = 839
            self.isa_pbx_target_dependency()
            self.state = 841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__50:
                self.state = 840
                self.name()


            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__43:
                self.state = 843
                self.platform_filter()


            self.state = 847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__105:
                self.state = 846
                self.target()


            self.state = 849
            self.target_proxy()
            self.state = 850
            self.match(PBXProjParser.T__1)
            self.state = 851
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pbx_variant_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_variant_group(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_variant_groupContext,0)


        def children(self):
            return self.getTypedRuleContext(PBXProjParser.ChildrenContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_variant_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPbx_variant_group" ):
                listener.enterPbx_variant_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPbx_variant_group" ):
                listener.exitPbx_variant_group(self)




    def pbx_variant_group(self):

        localctx = PBXProjParser.Pbx_variant_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_pbx_variant_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.match(PBXProjParser.REFERENCE)
            self.state = 854
            self.match(PBXProjParser.T__3)
            self.state = 855
            self.match(PBXProjParser.T__0)
            self.state = 856
            self.isa_pbx_variant_group()
            self.state = 857
            self.children()
            self.state = 858
            self.name()
            self.state = 860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__51:
                self.state = 859
                self.path()


            self.state = 862
            self.source_tree()
            self.state = 863
            self.match(PBXProjParser.T__1)
            self.state = 864
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_build_configurationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_build_configuration(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_build_configurationContext,0)


        def build_settings(self):
            return self.getTypedRuleContext(PBXProjParser.Build_settingsContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def base_configuration_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Base_configuration_referenceContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_build_configuration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_build_configuration" ):
                listener.enterXc_build_configuration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_build_configuration" ):
                listener.exitXc_build_configuration(self)




    def xc_build_configuration(self):

        localctx = PBXProjParser.Xc_build_configurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_xc_build_configuration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.match(PBXProjParser.REFERENCE)
            self.state = 867
            self.match(PBXProjParser.T__3)
            self.state = 868
            self.match(PBXProjParser.T__0)
            self.state = 869
            self.isa_xc_build_configuration()
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__109:
                self.state = 870
                self.base_configuration_reference()


            self.state = 873
            self.build_settings()
            self.state = 874
            self.name()
            self.state = 875
            self.match(PBXProjParser.T__1)
            self.state = 876
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_configuration_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_configuration_listContext,0)


        def build_configurations(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configurationsContext,0)


        def default_configuration_is_visible(self):
            return self.getTypedRuleContext(PBXProjParser.Default_configuration_is_visibleContext,0)


        def default_configuration_name(self):
            return self.getTypedRuleContext(PBXProjParser.Default_configuration_nameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_configuration_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_configuration_list" ):
                listener.enterXc_configuration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_configuration_list" ):
                listener.exitXc_configuration_list(self)




    def xc_configuration_list(self):

        localctx = PBXProjParser.Xc_configuration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_xc_configuration_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.match(PBXProjParser.REFERENCE)
            self.state = 879
            self.match(PBXProjParser.T__3)
            self.state = 880
            self.match(PBXProjParser.T__0)
            self.state = 881
            self.isa_xc_configuration_list()
            self.state = 882
            self.build_configurations()
            self.state = 883
            self.default_configuration_is_visible()
            self.state = 885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__117:
                self.state = 884
                self.default_configuration_name()


            self.state = 887
            self.match(PBXProjParser.T__1)
            self.state = 888
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_remote_swift_package_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_remote_swift_package_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_remote_swift_package_referenceContext,0)


        def repository_url(self):
            return self.getTypedRuleContext(PBXProjParser.Repository_urlContext,0)


        def requirement(self):
            return self.getTypedRuleContext(PBXProjParser.RequirementContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_remote_swift_package_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_remote_swift_package_reference" ):
                listener.enterXc_remote_swift_package_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_remote_swift_package_reference" ):
                listener.exitXc_remote_swift_package_reference(self)




    def xc_remote_swift_package_reference(self):

        localctx = PBXProjParser.Xc_remote_swift_package_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_xc_remote_swift_package_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.match(PBXProjParser.REFERENCE)
            self.state = 891
            self.match(PBXProjParser.T__3)
            self.state = 892
            self.match(PBXProjParser.T__0)
            self.state = 893
            self.isa_xc_remote_swift_package_reference()
            self.state = 894
            self.repository_url()
            self.state = 895
            self.requirement()
            self.state = 896
            self.match(PBXProjParser.T__1)
            self.state = 897
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_swift_package_product_dependencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_swift_package_product_dependency(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_swift_package_product_dependencyContext,0)


        def product_name(self):
            return self.getTypedRuleContext(PBXProjParser.Product_nameContext,0)


        def xc_package(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_packageContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_swift_package_product_dependency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_swift_package_product_dependency" ):
                listener.enterXc_swift_package_product_dependency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_swift_package_product_dependency" ):
                listener.exitXc_swift_package_product_dependency(self)




    def xc_swift_package_product_dependency(self):

        localctx = PBXProjParser.Xc_swift_package_product_dependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_xc_swift_package_product_dependency)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.match(PBXProjParser.REFERENCE)
            self.state = 900
            self.match(PBXProjParser.T__3)
            self.state = 901
            self.match(PBXProjParser.T__0)
            self.state = 902
            self.isa_xc_swift_package_product_dependency()
            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__48:
                self.state = 903
                self.xc_package()


            self.state = 906
            self.product_name()
            self.state = 907
            self.match(PBXProjParser.T__1)
            self.state = 908
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_version_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_version_group(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_version_groupContext,0)


        def children(self):
            return self.getTypedRuleContext(PBXProjParser.ChildrenContext,0)


        def current_version(self):
            return self.getTypedRuleContext(PBXProjParser.Current_versionContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def version_group_type(self):
            return self.getTypedRuleContext(PBXProjParser.Version_group_typeContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_version_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_version_group" ):
                listener.enterXc_version_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_version_group" ):
                listener.exitXc_version_group(self)




    def xc_version_group(self):

        localctx = PBXProjParser.Xc_version_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_xc_version_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.match(PBXProjParser.REFERENCE)
            self.state = 911
            self.match(PBXProjParser.T__3)
            self.state = 912
            self.match(PBXProjParser.T__0)
            self.state = 913
            self.isa_xc_version_group()
            self.state = 914
            self.children()
            self.state = 915
            self.current_version()
            self.state = 917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__50:
                self.state = 916
                self.name()


            self.state = 919
            self.path()
            self.state = 920
            self.source_tree()
            self.state = 921
            self.version_group_type()
            self.state = 922
            self.match(PBXProjParser.T__1)
            self.state = 923
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_aggregate_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_aggregate_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_aggregate_target" ):
                listener.enterIsa_pbx_aggregate_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_aggregate_target" ):
                listener.exitIsa_pbx_aggregate_target(self)




    def isa_pbx_aggregate_target(self):

        localctx = PBXProjParser.Isa_pbx_aggregate_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_isa_pbx_aggregate_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 925
            self.match(PBXProjParser.ISA)
            self.state = 926
            self.match(PBXProjParser.T__3)
            self.state = 927
            self.match(PBXProjParser.T__6)
            self.state = 928
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_build_fileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_build_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_build_file" ):
                listener.enterIsa_pbx_build_file(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_build_file" ):
                listener.exitIsa_pbx_build_file(self)




    def isa_pbx_build_file(self):

        localctx = PBXProjParser.Isa_pbx_build_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_isa_pbx_build_file)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 930
            self.match(PBXProjParser.ISA)
            self.state = 931
            self.match(PBXProjParser.T__3)
            self.state = 932
            self.match(PBXProjParser.T__7)
            self.state = 933
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_container_item_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_container_item_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_container_item_proxy" ):
                listener.enterIsa_pbx_container_item_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_container_item_proxy" ):
                listener.exitIsa_pbx_container_item_proxy(self)




    def isa_pbx_container_item_proxy(self):

        localctx = PBXProjParser.Isa_pbx_container_item_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_isa_pbx_container_item_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 935
            self.match(PBXProjParser.ISA)
            self.state = 936
            self.match(PBXProjParser.T__3)
            self.state = 937
            self.match(PBXProjParser.T__8)
            self.state = 938
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_copy_files_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_copy_files_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_copy_files_build_phase" ):
                listener.enterIsa_pbx_copy_files_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_copy_files_build_phase" ):
                listener.exitIsa_pbx_copy_files_build_phase(self)




    def isa_pbx_copy_files_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_copy_files_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_isa_pbx_copy_files_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 940
            self.match(PBXProjParser.ISA)
            self.state = 941
            self.match(PBXProjParser.T__3)
            self.state = 942
            self.match(PBXProjParser.T__9)
            self.state = 943
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_file_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_file_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_file_reference" ):
                listener.enterIsa_pbx_file_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_file_reference" ):
                listener.exitIsa_pbx_file_reference(self)




    def isa_pbx_file_reference(self):

        localctx = PBXProjParser.Isa_pbx_file_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_isa_pbx_file_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 945
            self.match(PBXProjParser.ISA)
            self.state = 946
            self.match(PBXProjParser.T__3)
            self.state = 947
            self.match(PBXProjParser.T__10)
            self.state = 948
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_frameworks_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_frameworks_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_frameworks_build_phase" ):
                listener.enterIsa_pbx_frameworks_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_frameworks_build_phase" ):
                listener.exitIsa_pbx_frameworks_build_phase(self)




    def isa_pbx_frameworks_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_frameworks_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_isa_pbx_frameworks_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 950
            self.match(PBXProjParser.ISA)
            self.state = 951
            self.match(PBXProjParser.T__3)
            self.state = 952
            self.match(PBXProjParser.T__11)
            self.state = 953
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_group" ):
                listener.enterIsa_pbx_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_group" ):
                listener.exitIsa_pbx_group(self)




    def isa_pbx_group(self):

        localctx = PBXProjParser.Isa_pbx_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_isa_pbx_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 955
            self.match(PBXProjParser.ISA)
            self.state = 956
            self.match(PBXProjParser.T__3)
            self.state = 957
            self.match(PBXProjParser.T__12)
            self.state = 958
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_header_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_header_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_header_build_phase" ):
                listener.enterIsa_pbx_header_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_header_build_phase" ):
                listener.exitIsa_pbx_header_build_phase(self)




    def isa_pbx_header_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_header_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_isa_pbx_header_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.match(PBXProjParser.ISA)
            self.state = 961
            self.match(PBXProjParser.T__3)
            self.state = 962
            self.match(PBXProjParser.T__13)
            self.state = 963
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_native_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_native_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_native_target" ):
                listener.enterIsa_pbx_native_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_native_target" ):
                listener.exitIsa_pbx_native_target(self)




    def isa_pbx_native_target(self):

        localctx = PBXProjParser.Isa_pbx_native_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_isa_pbx_native_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.match(PBXProjParser.ISA)
            self.state = 966
            self.match(PBXProjParser.T__3)
            self.state = 967
            self.match(PBXProjParser.T__14)
            self.state = 968
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_legacy_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_legacy_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_legacy_target" ):
                listener.enterIsa_pbx_legacy_target(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_legacy_target" ):
                listener.exitIsa_pbx_legacy_target(self)




    def isa_pbx_legacy_target(self):

        localctx = PBXProjParser.Isa_pbx_legacy_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_isa_pbx_legacy_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.match(PBXProjParser.ISA)
            self.state = 971
            self.match(PBXProjParser.T__3)
            self.state = 972
            self.match(PBXProjParser.T__15)
            self.state = 973
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_projectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_project

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_project" ):
                listener.enterIsa_pbx_project(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_project" ):
                listener.exitIsa_pbx_project(self)




    def isa_pbx_project(self):

        localctx = PBXProjParser.Isa_pbx_projectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_isa_pbx_project)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.match(PBXProjParser.ISA)
            self.state = 976
            self.match(PBXProjParser.T__3)
            self.state = 977
            self.match(PBXProjParser.T__16)
            self.state = 978
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_reference_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_reference_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_reference_proxy" ):
                listener.enterIsa_pbx_reference_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_reference_proxy" ):
                listener.exitIsa_pbx_reference_proxy(self)




    def isa_pbx_reference_proxy(self):

        localctx = PBXProjParser.Isa_pbx_reference_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_isa_pbx_reference_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.match(PBXProjParser.ISA)
            self.state = 981
            self.match(PBXProjParser.T__3)
            self.state = 982
            self.match(PBXProjParser.T__17)
            self.state = 983
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_resources_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_resources_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_resources_build_phase" ):
                listener.enterIsa_pbx_resources_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_resources_build_phase" ):
                listener.exitIsa_pbx_resources_build_phase(self)




    def isa_pbx_resources_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_resources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_isa_pbx_resources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.match(PBXProjParser.ISA)
            self.state = 986
            self.match(PBXProjParser.T__3)
            self.state = 987
            self.match(PBXProjParser.T__18)
            self.state = 988
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_shell_script_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_shell_script_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_shell_script_build_phase" ):
                listener.enterIsa_pbx_shell_script_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_shell_script_build_phase" ):
                listener.exitIsa_pbx_shell_script_build_phase(self)




    def isa_pbx_shell_script_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_shell_script_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_isa_pbx_shell_script_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.match(PBXProjParser.ISA)
            self.state = 991
            self.match(PBXProjParser.T__3)
            self.state = 992
            self.match(PBXProjParser.T__19)
            self.state = 993
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_sources_build_phaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_sources_build_phase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_sources_build_phase" ):
                listener.enterIsa_pbx_sources_build_phase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_sources_build_phase" ):
                listener.exitIsa_pbx_sources_build_phase(self)




    def isa_pbx_sources_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_sources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_isa_pbx_sources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 995
            self.match(PBXProjParser.ISA)
            self.state = 996
            self.match(PBXProjParser.T__3)
            self.state = 997
            self.match(PBXProjParser.T__20)
            self.state = 998
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_target_dependencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_target_dependency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_target_dependency" ):
                listener.enterIsa_pbx_target_dependency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_target_dependency" ):
                listener.exitIsa_pbx_target_dependency(self)




    def isa_pbx_target_dependency(self):

        localctx = PBXProjParser.Isa_pbx_target_dependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_isa_pbx_target_dependency)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1000
            self.match(PBXProjParser.ISA)
            self.state = 1001
            self.match(PBXProjParser.T__3)
            self.state = 1002
            self.match(PBXProjParser.T__21)
            self.state = 1003
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_pbx_variant_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_variant_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_pbx_variant_group" ):
                listener.enterIsa_pbx_variant_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_pbx_variant_group" ):
                listener.exitIsa_pbx_variant_group(self)




    def isa_pbx_variant_group(self):

        localctx = PBXProjParser.Isa_pbx_variant_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_isa_pbx_variant_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1005
            self.match(PBXProjParser.ISA)
            self.state = 1006
            self.match(PBXProjParser.T__3)
            self.state = 1007
            self.match(PBXProjParser.T__22)
            self.state = 1008
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_build_configurationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_build_configuration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_build_configuration" ):
                listener.enterIsa_xc_build_configuration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_build_configuration" ):
                listener.exitIsa_xc_build_configuration(self)




    def isa_xc_build_configuration(self):

        localctx = PBXProjParser.Isa_xc_build_configurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_isa_xc_build_configuration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1010
            self.match(PBXProjParser.ISA)
            self.state = 1011
            self.match(PBXProjParser.T__3)
            self.state = 1012
            self.match(PBXProjParser.T__23)
            self.state = 1013
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_configuration_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_configuration_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_configuration_list" ):
                listener.enterIsa_xc_configuration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_configuration_list" ):
                listener.exitIsa_xc_configuration_list(self)




    def isa_xc_configuration_list(self):

        localctx = PBXProjParser.Isa_xc_configuration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_isa_xc_configuration_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.match(PBXProjParser.ISA)
            self.state = 1016
            self.match(PBXProjParser.T__3)
            self.state = 1017
            self.match(PBXProjParser.T__24)
            self.state = 1018
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_remote_swift_package_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_remote_swift_package_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_remote_swift_package_reference" ):
                listener.enterIsa_xc_remote_swift_package_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_remote_swift_package_reference" ):
                listener.exitIsa_xc_remote_swift_package_reference(self)




    def isa_xc_remote_swift_package_reference(self):

        localctx = PBXProjParser.Isa_xc_remote_swift_package_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_isa_xc_remote_swift_package_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.match(PBXProjParser.ISA)
            self.state = 1021
            self.match(PBXProjParser.T__3)
            self.state = 1022
            self.match(PBXProjParser.T__25)
            self.state = 1023
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_swift_package_product_dependencyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_swift_package_product_dependency

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_swift_package_product_dependency" ):
                listener.enterIsa_xc_swift_package_product_dependency(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_swift_package_product_dependency" ):
                listener.exitIsa_xc_swift_package_product_dependency(self)




    def isa_xc_swift_package_product_dependency(self):

        localctx = PBXProjParser.Isa_xc_swift_package_product_dependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_isa_xc_swift_package_product_dependency)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1025
            self.match(PBXProjParser.ISA)
            self.state = 1026
            self.match(PBXProjParser.T__3)
            self.state = 1027
            self.match(PBXProjParser.T__26)
            self.state = 1028
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isa_xc_version_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_version_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsa_xc_version_group" ):
                listener.enterIsa_xc_version_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsa_xc_version_group" ):
                listener.exitIsa_xc_version_group(self)




    def isa_xc_version_group(self):

        localctx = PBXProjParser.Isa_xc_version_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_isa_xc_version_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1030
            self.match(PBXProjParser.ISA)
            self.state = 1031
            self.match(PBXProjParser.T__3)
            self.state = 1032
            self.match(PBXProjParser.T__27)
            self.state = 1033
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_file_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_ref" ):
                listener.enterFile_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_ref" ):
                listener.exitFile_ref(self)




    def file_ref(self):

        localctx = PBXProjParser.File_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_file_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1035
            self.match(PBXProjParser.T__28)
            self.state = 1036
            self.match(PBXProjParser.T__3)
            self.state = 1037
            self.match(PBXProjParser.REFERENCE)
            self.state = 1038
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_ref" ):
                listener.enterProduct_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_ref" ):
                listener.exitProduct_ref(self)




    def product_ref(self):

        localctx = PBXProjParser.Product_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_product_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.match(PBXProjParser.T__29)
            self.state = 1041
            self.match(PBXProjParser.T__3)
            self.state = 1042
            self.match(PBXProjParser.REFERENCE)
            self.state = 1043
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Container_portalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_container_portal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContainer_portal" ):
                listener.enterContainer_portal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContainer_portal" ):
                listener.exitContainer_portal(self)




    def container_portal(self):

        localctx = PBXProjParser.Container_portalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_container_portal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self.match(PBXProjParser.T__30)
            self.state = 1046
            self.match(PBXProjParser.T__3)
            self.state = 1047
            self.match(PBXProjParser.REFERENCE)
            self.state = 1048
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proxy_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_proxy_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProxy_type" ):
                listener.enterProxy_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProxy_type" ):
                listener.exitProxy_type(self)




    def proxy_type(self):

        localctx = PBXProjParser.Proxy_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_proxy_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1050
            self.match(PBXProjParser.T__31)
            self.state = 1051
            self.match(PBXProjParser.T__3)
            self.state = 1052
            self.match(PBXProjParser.NUMBER)
            self.state = 1053
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Remote_global_id_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_remote_global_id_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemote_global_id_string" ):
                listener.enterRemote_global_id_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemote_global_id_string" ):
                listener.exitRemote_global_id_string(self)




    def remote_global_id_string(self):

        localctx = PBXProjParser.Remote_global_id_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_remote_global_id_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.match(PBXProjParser.T__32)
            self.state = 1056
            self.match(PBXProjParser.T__3)
            self.state = 1057
            self.match(PBXProjParser.REFERENCE)
            self.state = 1058
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Remote_infoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_remote_info

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemote_info" ):
                listener.enterRemote_info(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemote_info" ):
                listener.exitRemote_info(self)




    def remote_info(self):

        localctx = PBXProjParser.Remote_infoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_remote_info)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self.match(PBXProjParser.T__33)
            self.state = 1061
            self.match(PBXProjParser.T__3)
            self.state = 1062
            self.any_string()
            self.state = 1063
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_encodingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_file_encoding

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_encoding" ):
                listener.enterFile_encoding(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_encoding" ):
                listener.exitFile_encoding(self)




    def file_encoding(self):

        localctx = PBXProjParser.File_encodingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_file_encoding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.match(PBXProjParser.T__34)
            self.state = 1066
            self.match(PBXProjParser.T__3)
            self.state = 1067
            self.match(PBXProjParser.NUMBER)
            self.state = 1068
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_comments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComments" ):
                listener.enterComments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComments" ):
                listener.exitComments(self)




    def comments(self):

        localctx = PBXProjParser.CommentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_comments)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            self.match(PBXProjParser.T__35)
            self.state = 1071
            self.match(PBXProjParser.T__3)
            self.state = 1072
            self.any_string()
            self.state = 1073
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Explicit_file_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_explicit_file_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicit_file_type" ):
                listener.enterExplicit_file_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicit_file_type" ):
                listener.exitExplicit_file_type(self)




    def explicit_file_type(self):

        localctx = PBXProjParser.Explicit_file_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_explicit_file_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1075
            self.match(PBXProjParser.T__36)
            self.state = 1076
            self.match(PBXProjParser.T__3)
            self.state = 1077
            self.any_string()
            self.state = 1078
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_known_file_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_last_known_file_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_known_file_type" ):
                listener.enterLast_known_file_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_known_file_type" ):
                listener.exitLast_known_file_type(self)




    def last_known_file_type(self):

        localctx = PBXProjParser.Last_known_file_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_last_known_file_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.match(PBXProjParser.T__37)
            self.state = 1081
            self.match(PBXProjParser.T__3)
            self.state = 1082
            self.any_string()
            self.state = 1083
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Include_in_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_include_in_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclude_in_index" ):
                listener.enterInclude_in_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclude_in_index" ):
                listener.exitInclude_in_index(self)




    def include_in_index(self):

        localctx = PBXProjParser.Include_in_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_include_in_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self.match(PBXProjParser.T__38)
            self.state = 1086
            self.match(PBXProjParser.T__3)
            self.state = 1087
            self.match(PBXProjParser.NUMBER)
            self.state = 1088
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indent_widthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_indent_width

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndent_width" ):
                listener.enterIndent_width(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndent_width" ):
                listener.exitIndent_width(self)




    def indent_width(self):

        localctx = PBXProjParser.Indent_widthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_indent_width)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1090
            self.match(PBXProjParser.T__39)
            self.state = 1091
            self.match(PBXProjParser.T__3)
            self.state = 1092
            self.match(PBXProjParser.NUMBER)
            self.state = 1093
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tab_widthContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_tab_width

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTab_width" ):
                listener.enterTab_width(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTab_width" ):
                listener.exitTab_width(self)




    def tab_width(self):

        localctx = PBXProjParser.Tab_widthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_tab_width)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self.match(PBXProjParser.T__40)
            self.state = 1096
            self.match(PBXProjParser.T__3)
            self.state = 1097
            self.match(PBXProjParser.NUMBER)
            self.state = 1098
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Uses_tabsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_uses_tabs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUses_tabs" ):
                listener.enterUses_tabs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUses_tabs" ):
                listener.exitUses_tabs(self)




    def uses_tabs(self):

        localctx = PBXProjParser.Uses_tabsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_uses_tabs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1100
            self.match(PBXProjParser.T__41)
            self.state = 1101
            self.match(PBXProjParser.T__3)
            self.state = 1102
            self.match(PBXProjParser.NUMBER)
            self.state = 1103
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wraps_linesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_wraps_lines

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWraps_lines" ):
                listener.enterWraps_lines(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWraps_lines" ):
                listener.exitWraps_lines(self)




    def wraps_lines(self):

        localctx = PBXProjParser.Wraps_linesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_wraps_lines)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1105
            self.match(PBXProjParser.T__42)
            self.state = 1106
            self.match(PBXProjParser.T__3)
            self.state = 1107
            self.match(PBXProjParser.NUMBER)
            self.state = 1108
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Platform_filterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_platform_filter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlatform_filter" ):
                listener.enterPlatform_filter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlatform_filter" ):
                listener.exitPlatform_filter(self)




    def platform_filter(self):

        localctx = PBXProjParser.Platform_filterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_platform_filter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.match(PBXProjParser.T__43)
            self.state = 1111
            self.match(PBXProjParser.T__3)
            self.state = 1112
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1113
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChildrenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_children

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChildren" ):
                listener.enterChildren(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChildren" ):
                listener.exitChildren(self)




    def children(self):

        localctx = PBXProjParser.ChildrenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_children)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1115
            self.match(PBXProjParser.T__44)
            self.state = 1116
            self.match(PBXProjParser.T__3)
            self.state = 1117
            self.reference_list()
            self.state = 1118
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_install_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_install_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_install_path" ):
                listener.enterProduct_install_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_install_path" ):
                listener.exitProduct_install_path(self)




    def product_install_path(self):

        localctx = PBXProjParser.Product_install_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_product_install_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self.match(PBXProjParser.T__45)
            self.state = 1121
            self.match(PBXProjParser.T__3)
            self.state = 1122
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 1123
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Repository_urlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_repository_url

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepository_url" ):
                listener.enterRepository_url(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepository_url" ):
                listener.exitRepository_url(self)




    def repository_url(self):

        localctx = PBXProjParser.Repository_urlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_repository_url)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1125
            self.match(PBXProjParser.T__46)
            self.state = 1126
            self.match(PBXProjParser.T__3)
            self.state = 1127
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 1128
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RequirementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_requirement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRequirement" ):
                listener.enterRequirement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRequirement" ):
                listener.exitRequirement(self)




    def requirement(self):

        localctx = PBXProjParser.RequirementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_requirement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1130
            self.match(PBXProjParser.T__47)
            self.state = 1131
            self.match(PBXProjParser.T__3)
            self.state = 1132
            self.match(PBXProjParser.T__0)
            self.state = 1136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PBXProjParser.NUMBER - 128)) | (1 << (PBXProjParser.QUOTED_STRING - 128)) | (1 << (PBXProjParser.NON_QUOTED_STRING - 128)) | (1 << (PBXProjParser.VARIABLE - 128)))) != 0):
                self.state = 1133
                self.key_value()
                self.state = 1138
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1139
            self.match(PBXProjParser.T__1)
            self.state = 1140
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_packageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_package

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_package" ):
                listener.enterXc_package(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_package" ):
                listener.exitXc_package(self)




    def xc_package(self):

        localctx = PBXProjParser.Xc_packageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_xc_package)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            self.match(PBXProjParser.T__48)
            self.state = 1143
            self.match(PBXProjParser.T__3)
            self.state = 1144
            self.match(PBXProjParser.REFERENCE)
            self.state = 1145
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_product_dependenciesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_package_product_dependencies

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_product_dependencies" ):
                listener.enterPackage_product_dependencies(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_product_dependencies" ):
                listener.exitPackage_product_dependencies(self)




    def package_product_dependencies(self):

        localctx = PBXProjParser.Package_product_dependenciesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_package_product_dependencies)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            self.match(PBXProjParser.T__49)
            self.state = 1148
            self.match(PBXProjParser.T__3)
            self.state = 1149
            self.reference_list()
            self.state = 1150
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = PBXProjParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1152
            self.match(PBXProjParser.T__50)
            self.state = 1153
            self.match(PBXProjParser.T__3)
            self.state = 1154
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1155
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPath" ):
                listener.enterPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPath" ):
                listener.exitPath(self)




    def path(self):

        localctx = PBXProjParser.PathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_path)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1157
            self.match(PBXProjParser.T__51)
            self.state = 1158
            self.match(PBXProjParser.T__3)
            self.state = 1159
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1160
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Source_treeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_source_tree

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSource_tree" ):
                listener.enterSource_tree(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSource_tree" ):
                listener.exitSource_tree(self)




    def source_tree(self):

        localctx = PBXProjParser.Source_treeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_source_tree)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1162
            self.match(PBXProjParser.T__52)
            self.state = 1163
            self.match(PBXProjParser.T__3)
            self.state = 1164
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1165
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_action_maskContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_action_mask

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_action_mask" ):
                listener.enterBuild_action_mask(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_action_mask" ):
                listener.exitBuild_action_mask(self)




    def build_action_mask(self):

        localctx = PBXProjParser.Build_action_maskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_build_action_mask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            self.match(PBXProjParser.T__53)
            self.state = 1168
            self.match(PBXProjParser.T__3)
            self.state = 1169
            self.match(PBXProjParser.NUMBER)
            self.state = 1170
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_files

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFiles" ):
                listener.enterFiles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFiles" ):
                listener.exitFiles(self)




    def files(self):

        localctx = PBXProjParser.FilesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_files)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            self.match(PBXProjParser.T__54)
            self.state = 1173
            self.match(PBXProjParser.T__3)
            self.state = 1174
            self.reference_list()
            self.state = 1175
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Run_only_for_deployment_postprocessingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_run_only_for_deployment_postprocessing

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRun_only_for_deployment_postprocessing" ):
                listener.enterRun_only_for_deployment_postprocessing(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRun_only_for_deployment_postprocessing" ):
                listener.exitRun_only_for_deployment_postprocessing(self)




    def run_only_for_deployment_postprocessing(self):

        localctx = PBXProjParser.Run_only_for_deployment_postprocessingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_run_only_for_deployment_postprocessing)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self.match(PBXProjParser.T__55)
            self.state = 1178
            self.match(PBXProjParser.T__3)
            self.state = 1179
            self.match(PBXProjParser.NUMBER)
            self.state = 1180
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reference_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self, i:int=None):
            if i is None:
                return self.getTokens(PBXProjParser.REFERENCE)
            else:
                return self.getToken(PBXProjParser.REFERENCE, i)

        def getRuleIndex(self):
            return PBXProjParser.RULE_reference_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReference_list" ):
                listener.enterReference_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReference_list" ):
                listener.exitReference_list(self)




    def reference_list(self):

        localctx = PBXProjParser.Reference_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_reference_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self.match(PBXProjParser.T__56)
            self.state = 1187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PBXProjParser.REFERENCE:
                self.state = 1183
                self.match(PBXProjParser.REFERENCE)
                self.state = 1184
                self.match(PBXProjParser.T__57)
                self.state = 1189
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1190
            self.match(PBXProjParser.T__58)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_string_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Any_stringContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Any_stringContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_any_string_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_string_list" ):
                listener.enterAny_string_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_string_list" ):
                listener.exitAny_string_list(self)




    def any_string_list(self):

        localctx = PBXProjParser.Any_string_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_any_string_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.match(PBXProjParser.T__56)
            self.state = 1198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PBXProjParser.NUMBER - 128)) | (1 << (PBXProjParser.QUOTED_STRING - 128)) | (1 << (PBXProjParser.NON_QUOTED_STRING - 128)) | (1 << (PBXProjParser.VARIABLE - 128)))) != 0):
                self.state = 1193
                self.any_string()
                self.state = 1194
                self.match(PBXProjParser.T__57)
                self.state = 1200
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1201
            self.match(PBXProjParser.T__58)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Non_quoted_strings_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(PBXProjParser.NON_QUOTED_STRING)
            else:
                return self.getToken(PBXProjParser.NON_QUOTED_STRING, i)

        def getRuleIndex(self):
            return PBXProjParser.RULE_non_quoted_strings_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNon_quoted_strings_list" ):
                listener.enterNon_quoted_strings_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNon_quoted_strings_list" ):
                listener.exitNon_quoted_strings_list(self)




    def non_quoted_strings_list(self):

        localctx = PBXProjParser.Non_quoted_strings_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_non_quoted_strings_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1203
            self.match(PBXProjParser.T__56)
            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PBXProjParser.NON_QUOTED_STRING:
                self.state = 1204
                self.match(PBXProjParser.NON_QUOTED_STRING)
                self.state = 1205
                self.match(PBXProjParser.T__57)
                self.state = 1210
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1211
            self.match(PBXProjParser.T__58)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_configuration_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_configuration_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_configuration_list" ):
                listener.enterBuild_configuration_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_configuration_list" ):
                listener.exitBuild_configuration_list(self)




    def build_configuration_list(self):

        localctx = PBXProjParser.Build_configuration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_build_configuration_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1213
            self.match(PBXProjParser.T__59)
            self.state = 1214
            self.match(PBXProjParser.T__3)
            self.state = 1215
            self.match(PBXProjParser.REFERENCE)
            self.state = 1216
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_phasesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_phases

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_phases" ):
                listener.enterBuild_phases(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_phases" ):
                listener.exitBuild_phases(self)




    def build_phases(self):

        localctx = PBXProjParser.Build_phasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_build_phases)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1218
            self.match(PBXProjParser.T__60)
            self.state = 1219
            self.match(PBXProjParser.T__3)
            self.state = 1220
            self.reference_list()
            self.state = 1221
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_rulesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_rules

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_rules" ):
                listener.enterBuild_rules(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_rules" ):
                listener.exitBuild_rules(self)




    def build_rules(self):

        localctx = PBXProjParser.Build_rulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_build_rules)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1223
            self.match(PBXProjParser.T__61)
            self.state = 1224
            self.match(PBXProjParser.T__3)
            self.state = 1225
            self.reference_list()
            self.state = 1226
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_arguments_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_arguments_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_arguments_string" ):
                listener.enterBuild_arguments_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_arguments_string" ):
                listener.exitBuild_arguments_string(self)




    def build_arguments_string(self):

        localctx = PBXProjParser.Build_arguments_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_build_arguments_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1228
            self.match(PBXProjParser.T__62)
            self.state = 1229
            self.match(PBXProjParser.T__3)
            self.state = 1230
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1231
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_tool_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_tool_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_tool_path" ):
                listener.enterBuild_tool_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_tool_path" ):
                listener.exitBuild_tool_path(self)




    def build_tool_path(self):

        localctx = PBXProjParser.Build_tool_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_build_tool_path)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1233
            self.match(PBXProjParser.T__63)
            self.state = 1234
            self.match(PBXProjParser.T__3)
            self.state = 1235
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1236
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_working_directoryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_working_directory

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_working_directory" ):
                listener.enterBuild_working_directory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_working_directory" ):
                listener.exitBuild_working_directory(self)




    def build_working_directory(self):

        localctx = PBXProjParser.Build_working_directoryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_build_working_directory)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1238
            self.match(PBXProjParser.T__64)
            self.state = 1239
            self.match(PBXProjParser.T__3)
            self.state = 1240
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1241
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pass_build_settings_in_environmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_pass_build_settings_in_environment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_build_settings_in_environment" ):
                listener.enterPass_build_settings_in_environment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_build_settings_in_environment" ):
                listener.exitPass_build_settings_in_environment(self)




    def pass_build_settings_in_environment(self):

        localctx = PBXProjParser.Pass_build_settings_in_environmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_pass_build_settings_in_environment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1243
            self.match(PBXProjParser.T__65)
            self.state = 1244
            self.match(PBXProjParser.T__3)
            self.state = 1245
            self.match(PBXProjParser.NUMBER)
            self.state = 1246
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DependenciesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_dependencies

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDependencies" ):
                listener.enterDependencies(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDependencies" ):
                listener.exitDependencies(self)




    def dependencies(self):

        localctx = PBXProjParser.DependenciesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_dependencies)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1248
            self.match(PBXProjParser.T__66)
            self.state = 1249
            self.match(PBXProjParser.T__3)
            self.state = 1250
            self.reference_list()
            self.state = 1251
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_product_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_name" ):
                listener.enterProduct_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_name" ):
                listener.exitProduct_name(self)




    def product_name(self):

        localctx = PBXProjParser.Product_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_product_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1253
            self.match(PBXProjParser.T__67)
            self.state = 1254
            self.match(PBXProjParser.T__3)
            self.state = 1255
            self.any_string()
            self.state = 1256
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_reference" ):
                listener.enterProduct_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_reference" ):
                listener.exitProduct_reference(self)




    def product_reference(self):

        localctx = PBXProjParser.Product_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_product_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self.match(PBXProjParser.T__68)
            self.state = 1259
            self.match(PBXProjParser.T__3)
            self.state = 1260
            self.match(PBXProjParser.REFERENCE)
            self.state = 1261
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_type" ):
                listener.enterProduct_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_type" ):
                listener.exitProduct_type(self)




    def product_type(self):

        localctx = PBXProjParser.Product_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_product_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1263
            self.match(PBXProjParser.T__69)
            self.state = 1264
            self.match(PBXProjParser.T__3)
            self.state = 1265
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 1266
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Line_endingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_line_ending

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLine_ending" ):
                listener.enterLine_ending(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLine_ending" ):
                listener.exitLine_ending(self)




    def line_ending(self):

        localctx = PBXProjParser.Line_endingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_line_ending)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1268
            self.match(PBXProjParser.T__70)
            self.state = 1269
            self.match(PBXProjParser.T__3)
            self.state = 1270
            self.match(PBXProjParser.NUMBER)
            self.state = 1271
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xc_language_specification_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_language_specification_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXc_language_specification_identifier" ):
                listener.enterXc_language_specification_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXc_language_specification_identifier" ):
                listener.exitXc_language_specification_identifier(self)




    def xc_language_specification_identifier(self):

        localctx = PBXProjParser.Xc_language_specification_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_xc_language_specification_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1273
            self.match(PBXProjParser.T__71)
            self.state = 1274
            self.match(PBXProjParser.T__3)
            self.state = 1275
            self.any_string()
            self.state = 1276
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plist_structure_definition_identifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_plist_structure_definition_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlist_structure_definition_identifier" ):
                listener.enterPlist_structure_definition_identifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlist_structure_definition_identifier" ):
                listener.exitPlist_structure_definition_identifier(self)




    def plist_structure_definition_identifier(self):

        localctx = PBXProjParser.Plist_structure_definition_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_plist_structure_definition_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1278
            self.match(PBXProjParser.T__72)
            self.state = 1279
            self.match(PBXProjParser.T__3)
            self.state = 1280
            self.any_string()
            self.state = 1281
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def build_targets_in_parallel(self):
            return self.getTypedRuleContext(PBXProjParser.Build_targets_in_parallelContext,0)


        def class_prefix(self):
            return self.getTypedRuleContext(PBXProjParser.Class_prefixContext,0)


        def default_build_system_type_for_workspace(self):
            return self.getTypedRuleContext(PBXProjParser.Default_build_system_type_for_workspaceContext,0)


        def last_swift_migration(self):
            return self.getTypedRuleContext(PBXProjParser.Last_swift_migrationContext,0)


        def last_swift_update_check(self):
            return self.getTypedRuleContext(PBXProjParser.Last_swift_update_checkContext,0)


        def last_testing_upgrade_check(self):
            return self.getTypedRuleContext(PBXProjParser.Last_testing_upgrade_checkContext,0)


        def last_upgrade_check(self):
            return self.getTypedRuleContext(PBXProjParser.Last_upgrade_checkContext,0)


        def organization_name(self):
            return self.getTypedRuleContext(PBXProjParser.Organization_nameContext,0)


        def target_attributes(self):
            return self.getTypedRuleContext(PBXProjParser.Target_attributesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributes" ):
                listener.enterAttributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributes" ):
                listener.exitAttributes(self)




    def attributes(self):

        localctx = PBXProjParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            self.match(PBXProjParser.T__73)
            self.state = 1284
            self.match(PBXProjParser.T__3)
            self.state = 1285
            self.match(PBXProjParser.T__0)
            self.state = 1287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__77:
                self.state = 1286
                self.build_targets_in_parallel()


            self.state = 1290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__122:
                self.state = 1289
                self.class_prefix()


            self.state = 1293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__75:
                self.state = 1292
                self.default_build_system_type_for_workspace()


            self.state = 1296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__74:
                self.state = 1295
                self.last_swift_migration()


            self.state = 1299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__76:
                self.state = 1298
                self.last_swift_update_check()


            self.state = 1302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__78:
                self.state = 1301
                self.last_testing_upgrade_check()


            self.state = 1305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__79:
                self.state = 1304
                self.last_upgrade_check()


            self.state = 1308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__80:
                self.state = 1307
                self.organization_name()


            self.state = 1311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__81:
                self.state = 1310
                self.target_attributes()


            self.state = 1313
            self.match(PBXProjParser.T__1)
            self.state = 1314
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_swift_migrationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_swift_migration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_swift_migration" ):
                listener.enterLast_swift_migration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_swift_migration" ):
                listener.exitLast_swift_migration(self)




    def last_swift_migration(self):

        localctx = PBXProjParser.Last_swift_migrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_last_swift_migration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            self.match(PBXProjParser.T__74)
            self.state = 1317
            self.match(PBXProjParser.T__3)
            self.state = 1318
            self.match(PBXProjParser.NUMBER)
            self.state = 1319
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_build_system_type_for_workspaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_default_build_system_type_for_workspace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_build_system_type_for_workspace" ):
                listener.enterDefault_build_system_type_for_workspace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_build_system_type_for_workspace" ):
                listener.exitDefault_build_system_type_for_workspace(self)




    def default_build_system_type_for_workspace(self):

        localctx = PBXProjParser.Default_build_system_type_for_workspaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_default_build_system_type_for_workspace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self.match(PBXProjParser.T__75)
            self.state = 1322
            self.match(PBXProjParser.T__3)
            self.state = 1323
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1324
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_swift_update_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_swift_update_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_swift_update_check" ):
                listener.enterLast_swift_update_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_swift_update_check" ):
                listener.exitLast_swift_update_check(self)




    def last_swift_update_check(self):

        localctx = PBXProjParser.Last_swift_update_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_last_swift_update_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            self.match(PBXProjParser.T__76)
            self.state = 1327
            self.match(PBXProjParser.T__3)
            self.state = 1328
            self.match(PBXProjParser.NUMBER)
            self.state = 1329
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_targets_in_parallelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_targets_in_parallel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_targets_in_parallel" ):
                listener.enterBuild_targets_in_parallel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_targets_in_parallel" ):
                listener.exitBuild_targets_in_parallel(self)




    def build_targets_in_parallel(self):

        localctx = PBXProjParser.Build_targets_in_parallelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_build_targets_in_parallel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1331
            self.match(PBXProjParser.T__77)
            self.state = 1332
            self.match(PBXProjParser.T__3)
            self.state = 1333
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1334
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_testing_upgrade_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_testing_upgrade_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_testing_upgrade_check" ):
                listener.enterLast_testing_upgrade_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_testing_upgrade_check" ):
                listener.exitLast_testing_upgrade_check(self)




    def last_testing_upgrade_check(self):

        localctx = PBXProjParser.Last_testing_upgrade_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_last_testing_upgrade_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1336
            self.match(PBXProjParser.T__78)
            self.state = 1337
            self.match(PBXProjParser.T__3)
            self.state = 1338
            self.match(PBXProjParser.NUMBER)
            self.state = 1339
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Last_upgrade_checkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_upgrade_check

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLast_upgrade_check" ):
                listener.enterLast_upgrade_check(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLast_upgrade_check" ):
                listener.exitLast_upgrade_check(self)




    def last_upgrade_check(self):

        localctx = PBXProjParser.Last_upgrade_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_last_upgrade_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1341
            self.match(PBXProjParser.T__79)
            self.state = 1342
            self.match(PBXProjParser.T__3)
            self.state = 1343
            self.match(PBXProjParser.NUMBER)
            self.state = 1344
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Organization_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_organization_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrganization_name" ):
                listener.enterOrganization_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrganization_name" ):
                listener.exitOrganization_name(self)




    def organization_name(self):

        localctx = PBXProjParser.Organization_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_organization_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1346
            self.match(PBXProjParser.T__80)
            self.state = 1347
            self.match(PBXProjParser.T__3)
            self.state = 1348
            self.any_string()
            self.state = 1349
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_attributesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def target_attribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Target_attributeContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Target_attributeContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_target_attributes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_attributes" ):
                listener.enterTarget_attributes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_attributes" ):
                listener.exitTarget_attributes(self)




    def target_attributes(self):

        localctx = PBXProjParser.Target_attributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_target_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1351
            self.match(PBXProjParser.T__81)
            self.state = 1352
            self.match(PBXProjParser.T__3)
            self.state = 1353
            self.match(PBXProjParser.T__0)
            self.state = 1357
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PBXProjParser.REFERENCE:
                self.state = 1354
                self.target_attribute()
                self.state = 1359
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1360
            self.match(PBXProjParser.T__1)
            self.state = 1361
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_attributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def created_on_tools_version(self):
            return self.getTypedRuleContext(PBXProjParser.Created_on_tools_versionContext,0)


        def test_target_id(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Test_target_idContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Test_target_idContext,i)


        def development_team(self):
            return self.getTypedRuleContext(PBXProjParser.Development_teamContext,0)


        def development_team_name(self):
            return self.getTypedRuleContext(PBXProjParser.Development_team_nameContext,0)


        def last_swift_migration(self):
            return self.getTypedRuleContext(PBXProjParser.Last_swift_migrationContext,0)


        def provisioning_style(self):
            return self.getTypedRuleContext(PBXProjParser.Provisioning_styleContext,0)


        def system_capabilities(self):
            return self.getTypedRuleContext(PBXProjParser.System_capabilitiesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_target_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_attribute" ):
                listener.enterTarget_attribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_attribute" ):
                listener.exitTarget_attribute(self)




    def target_attribute(self):

        localctx = PBXProjParser.Target_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_target_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1363
            self.match(PBXProjParser.REFERENCE)
            self.state = 1364
            self.match(PBXProjParser.T__3)
            self.state = 1365
            self.match(PBXProjParser.T__0)
            self.state = 1367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__82:
                self.state = 1366
                self.created_on_tools_version()


            self.state = 1370
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 1369
                self.test_target_id()


            self.state = 1373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__84:
                self.state = 1372
                self.development_team()


            self.state = 1376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__85:
                self.state = 1375
                self.development_team_name()


            self.state = 1379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__74:
                self.state = 1378
                self.last_swift_migration()


            self.state = 1382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__86:
                self.state = 1381
                self.provisioning_style()


            self.state = 1385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__119:
                self.state = 1384
                self.system_capabilities()


            self.state = 1388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__83:
                self.state = 1387
                self.test_target_id()


            self.state = 1390
            self.match(PBXProjParser.T__1)
            self.state = 1391
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Created_on_tools_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_created_on_tools_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreated_on_tools_version" ):
                listener.enterCreated_on_tools_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreated_on_tools_version" ):
                listener.exitCreated_on_tools_version(self)




    def created_on_tools_version(self):

        localctx = PBXProjParser.Created_on_tools_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_created_on_tools_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1393
            self.match(PBXProjParser.T__82)
            self.state = 1394
            self.match(PBXProjParser.T__3)
            self.state = 1395
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1396
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Test_target_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_test_target_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest_target_id" ):
                listener.enterTest_target_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest_target_id" ):
                listener.exitTest_target_id(self)




    def test_target_id(self):

        localctx = PBXProjParser.Test_target_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_test_target_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1398
            self.match(PBXProjParser.T__83)
            self.state = 1399
            self.match(PBXProjParser.T__3)
            self.state = 1400
            self.match(PBXProjParser.REFERENCE)
            self.state = 1401
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Development_teamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_development_team

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDevelopment_team" ):
                listener.enterDevelopment_team(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDevelopment_team" ):
                listener.exitDevelopment_team(self)




    def development_team(self):

        localctx = PBXProjParser.Development_teamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_development_team)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1403
            self.match(PBXProjParser.T__84)
            self.state = 1404
            self.match(PBXProjParser.T__3)
            self.state = 1405
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1406
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Development_team_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_development_team_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDevelopment_team_name" ):
                listener.enterDevelopment_team_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDevelopment_team_name" ):
                listener.exitDevelopment_team_name(self)




    def development_team_name(self):

        localctx = PBXProjParser.Development_team_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_development_team_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1408
            self.match(PBXProjParser.T__85)
            self.state = 1409
            self.match(PBXProjParser.T__3)
            self.state = 1410
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1411
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Provisioning_styleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_provisioning_style

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProvisioning_style" ):
                listener.enterProvisioning_style(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProvisioning_style" ):
                listener.exitProvisioning_style(self)




    def provisioning_style(self):

        localctx = PBXProjParser.Provisioning_styleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_provisioning_style)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1413
            self.match(PBXProjParser.T__86)
            self.state = 1414
            self.match(PBXProjParser.T__3)
            self.state = 1415
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1416
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compatibility_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_compatibility_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompatibility_version" ):
                listener.enterCompatibility_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompatibility_version" ):
                listener.exitCompatibility_version(self)




    def compatibility_version(self):

        localctx = PBXProjParser.Compatibility_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_compatibility_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1418
            self.match(PBXProjParser.T__87)
            self.state = 1419
            self.match(PBXProjParser.T__3)
            self.state = 1420
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 1421
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Development_regionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_development_region

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDevelopment_region" ):
                listener.enterDevelopment_region(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDevelopment_region" ):
                listener.exitDevelopment_region(self)




    def development_region(self):

        localctx = PBXProjParser.Development_regionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_development_region)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1423
            self.match(PBXProjParser.T__88)
            self.state = 1424
            self.match(PBXProjParser.T__3)
            self.state = 1425
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1426
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Has_scanned_for_encodingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_has_scanned_for_encodings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHas_scanned_for_encodings" ):
                listener.enterHas_scanned_for_encodings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHas_scanned_for_encodings" ):
                listener.exitHas_scanned_for_encodings(self)




    def has_scanned_for_encodings(self):

        localctx = PBXProjParser.Has_scanned_for_encodingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_has_scanned_for_encodings)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1428
            self.match(PBXProjParser.T__89)
            self.state = 1429
            self.match(PBXProjParser.T__3)
            self.state = 1430
            self.match(PBXProjParser.NUMBER)
            self.state = 1431
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Known_regionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_known_regions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKnown_regions" ):
                listener.enterKnown_regions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKnown_regions" ):
                listener.exitKnown_regions(self)




    def known_regions(self):

        localctx = PBXProjParser.Known_regionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_known_regions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1433
            self.match(PBXProjParser.T__90)
            self.state = 1434
            self.match(PBXProjParser.T__3)
            self.state = 1435
            self.any_string_list()
            self.state = 1436
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Main_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_main_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMain_group" ):
                listener.enterMain_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMain_group" ):
                listener.exitMain_group(self)




    def main_group(self):

        localctx = PBXProjParser.Main_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_main_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1438
            self.match(PBXProjParser.T__91)
            self.state = 1439
            self.match(PBXProjParser.T__3)
            self.state = 1440
            self.match(PBXProjParser.REFERENCE)
            self.state = 1441
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Product_ref_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_ref_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProduct_ref_group" ):
                listener.enterProduct_ref_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProduct_ref_group" ):
                listener.exitProduct_ref_group(self)




    def product_ref_group(self):

        localctx = PBXProjParser.Product_ref_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_product_ref_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            self.match(PBXProjParser.T__92)
            self.state = 1444
            self.match(PBXProjParser.T__3)
            self.state = 1445
            self.match(PBXProjParser.REFERENCE)
            self.state = 1446
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Package_referencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_package_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackage_references" ):
                listener.enterPackage_references(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackage_references" ):
                listener.exitPackage_references(self)




    def package_references(self):

        localctx = PBXProjParser.Package_referencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_package_references)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1448
            self.match(PBXProjParser.T__93)
            self.state = 1449
            self.match(PBXProjParser.T__3)
            self.state = 1450
            self.reference_list()
            self.state = 1451
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_dir_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_project_dir_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_dir_path" ):
                listener.enterProject_dir_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_dir_path" ):
                listener.exitProject_dir_path(self)




    def project_dir_path(self):

        localctx = PBXProjParser.Project_dir_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_project_dir_path)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1453
            self.match(PBXProjParser.T__94)
            self.state = 1454
            self.match(PBXProjParser.T__3)
            self.state = 1455
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1456
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_referencesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def project_references_list(self):
            return self.getTypedRuleContext(PBXProjParser.Project_references_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_project_references

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_references" ):
                listener.enterProject_references(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_references" ):
                listener.exitProject_references(self)




    def project_references(self):

        localctx = PBXProjParser.Project_referencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_project_references)
        try:
            self.state = 1470
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1458
                self.match(PBXProjParser.T__95)
                self.state = 1459
                self.match(PBXProjParser.T__3)
                self.state = 1460
                self.any_string()
                self.state = 1461
                self.match(PBXProjParser.T__4)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1463
                self.match(PBXProjParser.T__95)
                self.state = 1464
                self.match(PBXProjParser.T__3)
                self.state = 1465
                self.match(PBXProjParser.T__56)
                self.state = 1466
                self.project_references_list()
                self.state = 1467
                self.match(PBXProjParser.T__58)
                self.state = 1468
                self.match(PBXProjParser.T__4)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_rootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_project_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_root" ):
                listener.enterProject_root(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_root" ):
                listener.exitProject_root(self)




    def project_root(self):

        localctx = PBXProjParser.Project_rootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_project_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1472
            self.match(PBXProjParser.T__96)
            self.state = 1473
            self.match(PBXProjParser.T__3)
            self.state = 1474
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1475
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TargetsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_targets

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTargets" ):
                listener.enterTargets(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTargets" ):
                listener.exitTargets(self)




    def targets(self):

        localctx = PBXProjParser.TargetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_targets)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1477
            self.match(PBXProjParser.T__97)
            self.state = 1478
            self.match(PBXProjParser.T__3)
            self.state = 1479
            self.reference_list()
            self.state = 1480
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Input_file_list_pathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_input_file_list_paths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInput_file_list_paths" ):
                listener.enterInput_file_list_paths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInput_file_list_paths" ):
                listener.exitInput_file_list_paths(self)




    def input_file_list_paths(self):

        localctx = PBXProjParser.Input_file_list_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_input_file_list_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self.match(PBXProjParser.T__98)
            self.state = 1483
            self.match(PBXProjParser.T__3)
            self.state = 1484
            self.any_string_list()
            self.state = 1485
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Input_pathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_input_paths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInput_paths" ):
                listener.enterInput_paths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInput_paths" ):
                listener.exitInput_paths(self)




    def input_paths(self):

        localctx = PBXProjParser.Input_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_input_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1487
            self.match(PBXProjParser.T__99)
            self.state = 1488
            self.match(PBXProjParser.T__3)
            self.state = 1489
            self.any_string_list()
            self.state = 1490
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_file_list_pathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_output_file_list_paths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_file_list_paths" ):
                listener.enterOutput_file_list_paths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_file_list_paths" ):
                listener.exitOutput_file_list_paths(self)




    def output_file_list_paths(self):

        localctx = PBXProjParser.Output_file_list_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_output_file_list_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1492
            self.match(PBXProjParser.T__100)
            self.state = 1493
            self.match(PBXProjParser.T__3)
            self.state = 1494
            self.any_string_list()
            self.state = 1495
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Output_pathsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_output_paths

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutput_paths" ):
                listener.enterOutput_paths(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutput_paths" ):
                listener.exitOutput_paths(self)




    def output_paths(self):

        localctx = PBXProjParser.Output_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_output_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1497
            self.match(PBXProjParser.T__101)
            self.state = 1498
            self.match(PBXProjParser.T__3)
            self.state = 1499
            self.any_string_list()
            self.state = 1500
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shell_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_shell_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShell_path" ):
                listener.enterShell_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShell_path" ):
                listener.exitShell_path(self)




    def shell_path(self):

        localctx = PBXProjParser.Shell_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_shell_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1502
            self.match(PBXProjParser.T__102)
            self.state = 1503
            self.match(PBXProjParser.T__3)
            self.state = 1504
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1505
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shell_scriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_shell_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShell_script" ):
                listener.enterShell_script(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShell_script" ):
                listener.exitShell_script(self)




    def shell_script(self):

        localctx = PBXProjParser.Shell_scriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_shell_script)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1507
            self.match(PBXProjParser.T__103)
            self.state = 1508
            self.match(PBXProjParser.T__3)
            self.state = 1509
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1510
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Show_env_vars_in_logContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_show_env_vars_in_log

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_env_vars_in_log" ):
                listener.enterShow_env_vars_in_log(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_env_vars_in_log" ):
                listener.exitShow_env_vars_in_log(self)




    def show_env_vars_in_log(self):

        localctx = PBXProjParser.Show_env_vars_in_logContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_show_env_vars_in_log)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1512
            self.match(PBXProjParser.T__104)
            self.state = 1513
            self.match(PBXProjParser.T__3)
            self.state = 1514
            self.match(PBXProjParser.NUMBER)
            self.state = 1515
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TargetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_target

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget" ):
                listener.enterTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget" ):
                listener.exitTarget(self)




    def target(self):

        localctx = PBXProjParser.TargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            self.match(PBXProjParser.T__105)
            self.state = 1518
            self.match(PBXProjParser.T__3)
            self.state = 1519
            self.match(PBXProjParser.REFERENCE)
            self.state = 1520
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_proxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_target_proxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTarget_proxy" ):
                listener.enterTarget_proxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTarget_proxy" ):
                listener.exitTarget_proxy(self)




    def target_proxy(self):

        localctx = PBXProjParser.Target_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_target_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1522
            self.match(PBXProjParser.T__106)
            self.state = 1523
            self.match(PBXProjParser.T__3)
            self.state = 1524
            self.match(PBXProjParser.REFERENCE)
            self.state = 1525
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_file_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_type" ):
                listener.enterFile_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_type" ):
                listener.exitFile_type(self)




    def file_type(self):

        localctx = PBXProjParser.File_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_file_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1527
            self.match(PBXProjParser.T__107)
            self.state = 1528
            self.match(PBXProjParser.T__3)
            self.state = 1529
            self.any_string()
            self.state = 1530
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Remote_refContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_remote_ref

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemote_ref" ):
                listener.enterRemote_ref(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemote_ref" ):
                listener.exitRemote_ref(self)




    def remote_ref(self):

        localctx = PBXProjParser.Remote_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_remote_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1532
            self.match(PBXProjParser.T__108)
            self.state = 1533
            self.match(PBXProjParser.T__3)
            self.state = 1534
            self.match(PBXProjParser.REFERENCE)
            self.state = 1535
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_configuration_referenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_base_configuration_reference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_configuration_reference" ):
                listener.enterBase_configuration_reference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_configuration_reference" ):
                listener.exitBase_configuration_reference(self)




    def base_configuration_reference(self):

        localctx = PBXProjParser.Base_configuration_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_base_configuration_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1537
            self.match(PBXProjParser.T__109)
            self.state = 1538
            self.match(PBXProjParser.T__3)
            self.state = 1539
            self.match(PBXProjParser.REFERENCE)
            self.state = 1540
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_settingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_settings" ):
                listener.enterBuild_settings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_settings" ):
                listener.exitBuild_settings(self)




    def build_settings(self):

        localctx = PBXProjParser.Build_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_build_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1542
            self.match(PBXProjParser.T__110)
            self.state = 1543
            self.match(PBXProjParser.T__3)
            self.state = 1544
            self.match(PBXProjParser.T__0)
            self.state = 1548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PBXProjParser.NUMBER - 128)) | (1 << (PBXProjParser.QUOTED_STRING - 128)) | (1 << (PBXProjParser.NON_QUOTED_STRING - 128)) | (1 << (PBXProjParser.VARIABLE - 128)))) != 0):
                self.state = 1545
                self.key_value()
                self.state = 1550
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1551
            self.match(PBXProjParser.T__1)
            self.state = 1552
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dst_pathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_dst_path

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDst_path" ):
                listener.enterDst_path(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDst_path" ):
                listener.exitDst_path(self)




    def dst_path(self):

        localctx = PBXProjParser.Dst_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_dst_path)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1554
            self.match(PBXProjParser.T__111)
            self.state = 1555
            self.match(PBXProjParser.T__3)
            self.state = 1556
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1557
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dst_subfolder_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_dst_subfolder_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDst_subfolder_spec" ):
                listener.enterDst_subfolder_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDst_subfolder_spec" ):
                listener.exitDst_subfolder_spec(self)




    def dst_subfolder_spec(self):

        localctx = PBXProjParser.Dst_subfolder_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_dst_subfolder_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1559
            self.match(PBXProjParser.T__112)
            self.state = 1560
            self.match(PBXProjParser.T__3)
            self.state = 1561
            self.match(PBXProjParser.NUMBER)
            self.state = 1562
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_references_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def project_references_list_element(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Project_references_list_elementContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Project_references_list_elementContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_project_references_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_references_list" ):
                listener.enterProject_references_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_references_list" ):
                listener.exitProject_references_list(self)




    def project_references_list(self):

        localctx = PBXProjParser.Project_references_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_project_references_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PBXProjParser.T__0:
                self.state = 1564
                self.project_references_list_element()
                self.state = 1569
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Project_references_list_elementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self, i:int=None):
            if i is None:
                return self.getTokens(PBXProjParser.REFERENCE)
            else:
                return self.getToken(PBXProjParser.REFERENCE, i)

        def getRuleIndex(self):
            return PBXProjParser.RULE_project_references_list_element

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProject_references_list_element" ):
                listener.enterProject_references_list_element(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProject_references_list_element" ):
                listener.exitProject_references_list_element(self)




    def project_references_list_element(self):

        localctx = PBXProjParser.Project_references_list_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_project_references_list_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1570
            self.match(PBXProjParser.T__0)
            self.state = 1571
            self.match(PBXProjParser.T__113)
            self.state = 1572
            self.match(PBXProjParser.T__3)
            self.state = 1573
            self.match(PBXProjParser.REFERENCE)
            self.state = 1574
            self.match(PBXProjParser.T__4)
            self.state = 1575
            self.match(PBXProjParser.T__114)
            self.state = 1576
            self.match(PBXProjParser.T__3)
            self.state = 1577
            self.match(PBXProjParser.REFERENCE)
            self.state = 1578
            self.match(PBXProjParser.T__4)
            self.state = 1579
            self.match(PBXProjParser.T__1)
            self.state = 1580
            self.match(PBXProjParser.T__57)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Any_stringContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Any_stringContext,i)


        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def ALPHA_NUMERIC(self):
            return self.getToken(PBXProjParser.ALPHA_NUMERIC, 0)

        def key_value(self):
            return self.getTypedRuleContext(PBXProjParser.Key_valueContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_key_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKey_value" ):
                listener.enterKey_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKey_value" ):
                listener.exitKey_value(self)




    def key_value(self):

        localctx = PBXProjParser.Key_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_key_value)
        self._la = 0 # Token type
        try:
            self.state = 1618
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1582
                self.any_string()
                self.state = 1583
                self.match(PBXProjParser.T__3)
                self.state = 1584
                self.any_string()
                self.state = 1585
                self.match(PBXProjParser.T__4)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1587
                self.any_string()
                self.state = 1588
                self.match(PBXProjParser.T__3)
                self.state = 1589
                self.match(PBXProjParser.NUMBER)
                self.state = 1590
                self.match(PBXProjParser.T__4)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1592
                self.any_string()
                self.state = 1593
                self.match(PBXProjParser.T__3)
                self.state = 1594
                self.match(PBXProjParser.ALPHA_NUMERIC)
                self.state = 1595
                self.match(PBXProjParser.T__4)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1597
                self.any_string()
                self.state = 1598
                self.match(PBXProjParser.T__3)
                self.state = 1599
                self.match(PBXProjParser.T__0)
                self.state = 1600
                self.key_value()
                self.state = 1601
                self.match(PBXProjParser.T__1)
                self.state = 1602
                self.match(PBXProjParser.T__4)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1604
                self.any_string()
                self.state = 1605
                self.match(PBXProjParser.T__3)
                self.state = 1606
                self.match(PBXProjParser.T__56)
                self.state = 1612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PBXProjParser.NUMBER - 128)) | (1 << (PBXProjParser.QUOTED_STRING - 128)) | (1 << (PBXProjParser.NON_QUOTED_STRING - 128)) | (1 << (PBXProjParser.VARIABLE - 128)))) != 0):
                    self.state = 1607
                    self.any_string()
                    self.state = 1608
                    self.match(PBXProjParser.T__57)
                    self.state = 1614
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1615
                self.match(PBXProjParser.T__58)
                self.state = 1616
                self.match(PBXProjParser.T__4)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Build_configurationsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_configurations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuild_configurations" ):
                listener.enterBuild_configurations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuild_configurations" ):
                listener.exitBuild_configurations(self)




    def build_configurations(self):

        localctx = PBXProjParser.Build_configurationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_build_configurations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1620
            self.match(PBXProjParser.T__115)
            self.state = 1621
            self.match(PBXProjParser.T__3)
            self.state = 1622
            self.reference_list()
            self.state = 1623
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_configuration_is_visibleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_default_configuration_is_visible

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_configuration_is_visible" ):
                listener.enterDefault_configuration_is_visible(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_configuration_is_visible" ):
                listener.exitDefault_configuration_is_visible(self)




    def default_configuration_is_visible(self):

        localctx = PBXProjParser.Default_configuration_is_visibleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_default_configuration_is_visible)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1625
            self.match(PBXProjParser.T__116)
            self.state = 1626
            self.match(PBXProjParser.T__3)
            self.state = 1627
            self.match(PBXProjParser.NUMBER)
            self.state = 1628
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_configuration_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_default_configuration_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_configuration_name" ):
                listener.enterDefault_configuration_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_configuration_name" ):
                listener.exitDefault_configuration_name(self)




    def default_configuration_name(self):

        localctx = PBXProjParser.Default_configuration_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_default_configuration_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1630
            self.match(PBXProjParser.T__117)
            self.state = 1631
            self.match(PBXProjParser.T__3)
            self.state = 1632
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1633
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SettingsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_settings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSettings" ):
                listener.enterSettings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSettings" ):
                listener.exitSettings(self)




    def settings(self):

        localctx = PBXProjParser.SettingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1635
            self.match(PBXProjParser.T__118)
            self.state = 1636
            self.match(PBXProjParser.T__3)
            self.state = 1637
            self.match(PBXProjParser.T__0)
            self.state = 1641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PBXProjParser.NUMBER - 128)) | (1 << (PBXProjParser.QUOTED_STRING - 128)) | (1 << (PBXProjParser.NON_QUOTED_STRING - 128)) | (1 << (PBXProjParser.VARIABLE - 128)))) != 0):
                self.state = 1638
                self.key_value()
                self.state = 1643
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1644
            self.match(PBXProjParser.T__1)
            self.state = 1645
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class System_capabilitiesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_system_capabilities

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSystem_capabilities" ):
                listener.enterSystem_capabilities(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSystem_capabilities" ):
                listener.exitSystem_capabilities(self)




    def system_capabilities(self):

        localctx = PBXProjParser.System_capabilitiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_system_capabilities)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1647
            self.match(PBXProjParser.T__119)
            self.state = 1648
            self.match(PBXProjParser.T__3)
            self.state = 1649
            self.match(PBXProjParser.T__0)
            self.state = 1653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PBXProjParser.NUMBER - 128)) | (1 << (PBXProjParser.QUOTED_STRING - 128)) | (1 << (PBXProjParser.NON_QUOTED_STRING - 128)) | (1 << (PBXProjParser.VARIABLE - 128)))) != 0):
                self.state = 1650
                self.key_value()
                self.state = 1655
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1656
            self.match(PBXProjParser.T__1)
            self.state = 1657
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Current_versionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_current_version

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrent_version" ):
                listener.enterCurrent_version(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrent_version" ):
                listener.exitCurrent_version(self)




    def current_version(self):

        localctx = PBXProjParser.Current_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_current_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1659
            self.match(PBXProjParser.T__120)
            self.state = 1660
            self.match(PBXProjParser.T__3)
            self.state = 1661
            self.match(PBXProjParser.REFERENCE)
            self.state = 1662
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Version_group_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_version_group_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVersion_group_type" ):
                listener.enterVersion_group_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVersion_group_type" ):
                listener.exitVersion_group_type(self)




    def version_group_type(self):

        localctx = PBXProjParser.Version_group_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_version_group_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1664
            self.match(PBXProjParser.T__121)
            self.state = 1665
            self.match(PBXProjParser.T__3)
            self.state = 1666
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1667
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_prefixContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_class_prefix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_prefix" ):
                listener.enterClass_prefix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_prefix" ):
                listener.exitClass_prefix(self)




    def class_prefix(self):

        localctx = PBXProjParser.Class_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_class_prefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1669
            self.match(PBXProjParser.T__122)
            self.state = 1670
            self.match(PBXProjParser.T__3)
            self.state = 1671
            self.any_string()
            self.state = 1672
            self.match(PBXProjParser.T__4)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_stringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NUMBER(self):
            return self.getToken(PBXProjParser.NUMBER, 0)

        def VARIABLE(self):
            return self.getToken(PBXProjParser.VARIABLE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_any_string

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_string" ):
                listener.enterAny_string(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_string" ):
                listener.exitAny_string(self)




    def any_string(self):

        localctx = PBXProjParser.Any_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_any_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1674
            _la = self._input.LA(1)
            if not(((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (PBXProjParser.NUMBER - 128)) | (1 << (PBXProjParser.QUOTED_STRING - 128)) | (1 << (PBXProjParser.NON_QUOTED_STRING - 128)) | (1 << (PBXProjParser.VARIABLE - 128)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





